{
	"info": {
		"_postman_id": "49ba173e-c792-4fc8-a977-ab2834d29081",
		"name": "Tyk Demo",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "API Definition",
			"item": [
				{
					"name": "Middleware",
					"item": [
						{
							"name": "Middleware - JavaScript",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body data is set by middleware\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data).to.eql(\"Request body set by pre middleware\");",
											"});",
											"",
											"pm.test(\"'added' URL parameter is added by middleware \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.args.added).to.eql(\"123\");",
											"});",
											"",
											"pm.test(\"'Config-Data' header is added by middleware\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.headers['Config-Data']).to.eql(\"config-value\");",
											"});",
											"",
											"pm.test(\"'Accepted' header is unchanged by middleware\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.headers['Accepted']).to.eql(\"789\");",
											"});",
											"",
											"pm.test(\"Request is redirected by middleware\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.url).to.contain(\"/anything/post\");",
											"});",
											"",
											"pm.test(\"'Deleted' header is deleted by middleware\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.headers['Deleted']).to.eql(undefined);",
											"});",
											"",
											"pm.test(\"'User-Agent' header is set by middleware\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.headers['User-Agent']).to.eql(\"Tyk-JavaScript-Middleware\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Deleted",
										"value": "deleted value",
										"type": "text"
									},
									{
										"key": "Accepted",
										"value": "789",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{tyk-gateway.host}}/javascript-middleware-api/post?deleted=deleted-value&accepted=456",
									"protocol": "http",
									"host": [
										"{{tyk-gateway.host}}"
									],
									"path": [
										"javascript-middleware-api",
										"post"
									],
									"query": [
										{
											"key": "deleted",
											"value": "deleted-value"
										},
										{
											"key": "accepted",
											"value": "456"
										}
									]
								},
								"description": "Calls the `JavaScript Middleware API`, which executes two JavaScript middleware functions at the `pre` and `post` hooks.\n\nThe `pre` function does the following:\n- Writes to the API Gateway application log\n- Adds `User-Agent` header\n- Deletes `Deleted` header\n- Adds `added` URL parameter\n- Deletes `deleted` URL parameter\n- Changes the request body - see `data` property of response object\n- Changes the requested URL - see `url` property of response object\n\nThe `post` function does the following:\n- Writes to the API Gateway application log\n- Adds `config-data` header using value taken from API definition `config data`\n- Makes a separate HTTP request and writes the resulting response code and body to the API Gateway application log"
							},
							"response": []
						},
						{
							"name": "Middleware - Python",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Python middleware pre hook header is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.headers[\"Python-Plugin-Pre-Hook\"]).to.eql(\"Pre Hook\");",
											"});",
											"",
											"pm.test(\"Python middleware post hook header is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.headers[\"Python-Plugin-Post-Hook\"]).to.eql(\"Post Hook\");",
											"});",
											"",
											"pm.test(\"Python middleware response hook header is present\", function () {",
											"    pm.response.to.have.header(\"Python-Plugin-Response-Hook\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{tyk-gateway.host}}/python-middleware-api/get",
									"protocol": "http",
									"host": [
										"{{tyk-gateway.host}}"
									],
									"path": [
										"python-middleware-api",
										"get"
									]
								},
								"description": "This request calls the Python Middleware API, which uses Python to inject a custom header into the request as it is processed by the Gateway.\n\nThis middleware is configured to be activated at the `pre`, `post` and `response` hooks.\n\nThe request goes the `/get` endpoint. The server adds the headers it received into the response body - the custom headers are shown as `\"Python-Plugin-Pre-Hook\": \"Pre Hook\"` and `\"Python-Plugin-Post-Hook\": \"Post Hook\"`.\n\nThe plugin response hook adds a custom header to the response, called `Python-Plugin-Response-Hook`. It also logs the response status code to the Gateway application log. Check the Gateway's application log for entries prefixed with `Python plugin:`.\n\nThe plugin is bundled using the Gateway CLI, which outputs a signed compressed archive. This signature is then verified by the Gateway when it loads the Python plugin."
							},
							"response": []
						},
						{
							"name": "Middleware - Go",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Hello World header is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.headers.Hello).to.eql(\"World\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{tyk-gateway.host}}/go-plugin-api-no-auth/get",
									"protocol": "http",
									"host": [
										"{{tyk-gateway.host}}"
									],
									"path": [
										"go-plugin-api-no-auth",
										"get"
									]
								},
								"description": "This request calls the Go Plugin API, which uses Go to inject a custom header into the request as it is processed by the Gateway.\n\nThis API is configured to activate the plugin at the `post` hook.\n\nThe request goes the `/get` endpoint, where the server adds the headers it received into the response body - the custom header is shown as `\"Hello\": \"World\"`.\n\nThe plugin is built during the Tyk Demo bootstrap, which uses a special container to build the Go shared object (`.so`) library file, using the same Go version as that used to build the Gateway. This shared library can then be loaded by the Gateway at runtime, and the `AddHelloWorldHeader` function executed."
							},
							"response": []
						}
					]
				},
				{
					"name": "Endpoint Designer",
					"item": [
						{
							"name": "Plugin - Mock Response",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Mock response data is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.mock).to.eql(\"response\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-api-version",
										"value": "Default",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{tyk-gateway.host}}/plugin-demo-api/anything/mock",
									"protocol": "http",
									"host": [
										"{{tyk-gateway.host}}"
									],
									"path": [
										"plugin-demo-api",
										"anything",
										"mock"
									]
								},
								"description": "This request uses the `Mock Response` Endpoint Designer plugin to return a response directly from the Gateway when the API endpoint is called.\n\nThe mock response lets you define the headers and body of the response, as well as the HTTP status code returned. In this example the mock response is configured as follows:\n- Headers: Add a `Mock` header\n- Body: Add a basic JSON object as the body\n- HTTP status code: `200 OK`\n\nWhen the Mock Response is executed, the request does not reach the API Server, as the Gateway provides the response directly to the API Client."
							},
							"response": []
						},
						{
							"name": "Plugin - Blacklist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Error message is 'Requested endpoint is forbidden'\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql(\"Requested endpoint is forbidden\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{tyk-gateway.host}}/plugin-demo-api/anything/blacklist",
									"protocol": "http",
									"host": [
										"{{tyk-gateway.host}}"
									],
									"path": [
										"plugin-demo-api",
										"anything",
										"blacklist"
									]
								},
								"description": "The Blacklist plugin blocks requests, returning a `403 Forbidden` response."
							},
							"response": []
						},
						{
							"name": "Plugin - Circuit Breaker",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var tykGatewayHost = pm.variables.get(\"tyk-gateway.host\");",
											"",
											"var circuitBreakerRequest = {",
											"    url: 'http://' + tykGatewayHost + '/plugin-demo-api/status/500',",
											"    method: 'GET'",
											"};",
											"",
											"// Before we can test this properly, we must trigger the circuit breaker so that the actual test can start from a consistent position.",
											"// So we call the API until we get a 503, which should be a maximum of 5 attempts, at which point we wait for the service to come back online and then perform the test.",
											"pm.sendRequest(circuitBreakerRequest, function (err, response) {",
											"    if (response.code == 503) {",
											"        setTimeout(performTest, 5000);",
											"    } else {",
											"        pm.sendRequest(circuitBreakerRequest, function (err, response) {",
											"            if (response.code == 503) {",
											"                setTimeout(performTest, 5000);",
											"            } else {",
											"                pm.sendRequest(circuitBreakerRequest, function (err, response) {",
											"                    if (response.code == 503) {",
											"                        setTimeout(performTest, 5000);",
											"                    } else {",
											"                        pm.sendRequest(circuitBreakerRequest, function (err, response) {",
											"                            if (response.code == 503) {",
											"                                setTimeout(performTest, 5000);",
											"                            } else {",
											"                                pm.sendRequest(circuitBreakerRequest, function (err, response) {",
											"                                    if (response.code == 503) {",
											"                                        setTimeout(performTest, 5000);",
											"                                    } ",
											"                                });",
											"                            }",
											"                        });",
											"                    }",
											"                });",
											"            } ",
											"        });",
											"    }  ",
											"});",
											"",
											"function performTest() {",
											"    pm.test(\"5th server error response triggers circuit breaker\", function () {",
											"        // first 4 tests should be 500s, which triggers the circuit breaker so the fifth test is 503.",
											"        pm.sendRequest(circuitBreakerRequest, function (err, response) {",
											"            pm.expect(response.code).to.eql(500);",
											"",
											"            pm.sendRequest(circuitBreakerRequest, function (err, response) {",
											"                pm.expect(response.code).to.eql(500);",
											"                ",
											"                pm.sendRequest(circuitBreakerRequest, function (err, response) {",
											"                    pm.expect(response.code).to.eql(500);",
											"                    ",
											"                    pm.sendRequest(circuitBreakerRequest, function (err, response) {",
											"                        pm.expect(response.code).to.eql(500);",
											"",
											"                        pm.sendRequest(circuitBreakerRequest, function (err, response) {",
											"                            pm.expect(response.code).to.eql(503);",
											"                        });",
											"                    });",
											"                });",
											"            });",
											"        });",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{tyk-gateway.host}}/plugin-demo-api/status/500",
									"protocol": "http",
									"host": [
										"{{tyk-gateway.host}}"
									],
									"path": [
										"plugin-demo-api",
										"status",
										"500"
									]
								},
								"description": "The Circuit Breaker can protect API servers by blocking requests for endpoints which are consistently returning errors.\n\nThe plugin monitors the responses from the API server for errors. If the API server returns over a certain number of errors over a particular number of requests then the API Gateway will stop proxing requests to it for a number of seconds. When the circuit breaker is activated, the API Gateway returns a `503 Service Unavailable` response.\n\nIn this example, the endpoint called by this request always returns `500 Server Error` responses, so will easily trigger the circuit breaker. The circuit breaker has been set up to sample 4 requests, and if over 50% of them result in errors then the circuit breaker will be active for 15 seconds."
							},
							"response": []
						},
						{
							"name": "Plugin - Body Transform",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body data transformed to JSON\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.json[\"Beijing_VPN\"]).to.eql(\"127.0.0.2\");",
											"    pm.expect(jsonData.json[\"Shanghai_VPN\"]).to.eql(\"127.0.0.1\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<servers version=\"1\">\n  <server>\n    <serverName>Shanghai_VPN</serverName>\n    <serverIP>127.0.0.1</serverIP>\n  </server>\n  <server>\n    <serverName>Beijing_VPN</serverName>\n    <serverIP>127.0.0.2</serverIP>\n  </server>\n</servers>"
								},
								"url": {
									"raw": "http://{{tyk-gateway.host}}/plugin-demo-api/anything/body-transform",
									"protocol": "http",
									"host": [
										"{{tyk-gateway.host}}"
									],
									"path": [
										"plugin-demo-api",
										"anything",
										"body-transform"
									]
								},
								"description": "The Body Transform plugin can transform data in XML and JSON formats using templates. The output format can be anything, it depends entirely on the template. Transforms can be applied to both requests and responses.\n\nThis example applies a transform on the request, changing it from XML to JSON. You can see the request body is an XML document, but the response shows that the API server receive the data as JSON - you can verify this by checking the `data` and `json` properties of the response body."
							},
							"response": []
						},
						{
							"name": "Plugin - Enforced Timeout (part 1)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 504\", function () {",
											"    pm.response.to.have.status(504);",
											"});",
											"",
											"pm.test(\"Response time is more than 3 seconds\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.above(3000);",
											"});",
											"",
											"pm.test(\"Response time is less than 6 seconds\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(6000);",
											"});",
											"",
											"pm.test(\"Error message is 'Upstream service reached hard timeout.'\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql(\"Upstream service reached hard timeout.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{tyk-gateway.host}}/plugin-demo-api/delay/6",
									"protocol": "http",
									"host": [
										"{{tyk-gateway.host}}"
									],
									"path": [
										"plugin-demo-api",
										"delay",
										"6"
									]
								},
								"description": "The Enforced Timeout plugin will return an error response from the Gateway if the API server does not respond within a set time. \n\nThis request calls the `/delay/6` endpoint, which has a 6 second delay before responding. The endpoint uses the Enforced Timeout plugin, which is configured for 4 seconds, so will repsond with a `504 Gateway Timeout` before the API server can provide a response."
							},
							"response": []
						},
						{
							"name": "Plugin - Enforced Timeout (part 2)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is more than 1 second\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.above(1000);",
											"});",
											"",
											"pm.test(\"Response time is less than 3 seconds\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{tyk-gateway.host}}/plugin-demo-api/delay/1",
									"protocol": "http",
									"host": [
										"{{tyk-gateway.host}}"
									],
									"path": [
										"plugin-demo-api",
										"delay",
										"1"
									]
								},
								"description": "This endpoint has the same configuration at part 1, but because this endpoint only has a 1 second delay, it responds in time, so the API client receives the API server response and the Enforced Timeout is not activated."
							},
							"response": []
						},
						{
							"name": "Plugin - URL Rewrite (part 1 - basic rewrite)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"URL rewritten to '/anything/default-rewrite'\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.url).to.contain(\"/anything/default-rewrite\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{tyk-gateway.host}}/plugin-demo-api/anything/url-rewrite",
									"protocol": "http",
									"host": [
										"{{tyk-gateway.host}}"
									],
									"path": [
										"plugin-demo-api",
										"anything",
										"url-rewrite"
									]
								},
								"description": "The URL Rewrite plugin can rewrite the URL based on many different parameters. This example shows the most basic version, using the default rewrite, which is used if none of the advanced rewrite rules are triggered. In this case, it rewrites to `/anything/default-rewrite` - check the `url` property in the response body to see the URL which was called on the API server.\n\nThe advanced rewriter can perform rewriting based on many aspects of a request:\n\n- URL query\n- Header\n- Path\n- Body\n- Session metadata\n- Context data\n\nSee the other parts of the URL Rewrite example for examples of the advanced URL rewriting rules."
							},
							"response": []
						},
						{
							"name": "Plugin - URL Rewrite (part 2 - URL parameter)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"URL rewritten to '/anything/rewrite-query'\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.url).to.contain(\"/anything/rewrite-query\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{tyk-gateway.host}}/plugin-demo-api/anything/url-rewrite?query=rewrite",
									"protocol": "http",
									"host": [
										"{{tyk-gateway.host}}"
									],
									"path": [
										"plugin-demo-api",
										"anything",
										"url-rewrite"
									],
									"query": [
										{
											"key": "query",
											"value": "rewrite"
										}
									]
								},
								"description": "This example triggers an advanced URL rewrite rule based on the URL parameter. It checks for a parameter with the key `query` and value `rewrite`. The plugin rewrites to the URL `/anything/rewrite-query`."
							},
							"response": []
						},
						{
							"name": "Plugin - URL Rewrite (part 3 - request header)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"URL rewritten to '/anything/rewrite-header'\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.url).to.contain(\"/anything/rewrite-header\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Header",
										"value": "rewrite",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{tyk-gateway.host}}/plugin-demo-api/anything/url-rewrite",
									"protocol": "http",
									"host": [
										"{{tyk-gateway.host}}"
									],
									"path": [
										"plugin-demo-api",
										"anything",
										"url-rewrite"
									]
								},
								"description": "This example triggers an advanced URL rewrite rule based on the request headers. It checks for a header with the key `Header` and value `rewrite`. The plugin rewrites to the URL `/anything/rewrite-header`."
							},
							"response": []
						},
						{
							"name": "Plugin - URL Rewrite (part 4 - looping)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"URL rewritten to '/get'\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.url).to.contain(\"/get\");",
											"});",
											"",
											"pm.test(\"X-Req-Id header was injected into request\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.headers[\"X-Req-Id\"]).to.not.be.empty;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{tyk-gateway.host}}/plugin-demo-api/anything/looping",
									"protocol": "http",
									"host": [
										"{{tyk-gateway.host}}"
									],
									"path": [
										"plugin-demo-api",
										"anything",
										"looping"
									]
								},
								"description": "This example shows how the looping functionality can be used to change the API Definition executed by the API Gateway.\n\nLooping requests use the `tyk` URL scheme to efficiently process changes in API Definition context without having to generate additional HTTP requests.\n\nIn this case, the request calls the *Plugin Demo API* endpoint `/anything/looping`, which is configured to rewrite the URL using the `tyk` scheme, the ID of the API Definition to loop to (the *Basic Open API*) and the path `get`: `tyk://727dad853a8a45f64ab981154d1ffdad/get`.\n\nWe can verify the looping effect by checking the response body received:\n- `url` shows `http://httpbin/get` which is the target host of the *Basic Open API* combined with the path from the URL rewrite rule.\n- `headers.X-Req-Id` is a value injected by the *Basic Open API*."
							},
							"response": []
						},
						{
							"name": "Plugin - Modify Headers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"'New-Header' header is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.headers['New-Header']).to.eql(\"new-header-value\");",
											"});",
											"",
											"pm.test(\"'Delete-Header' header not present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.headers['Delete-Header']).to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Delete-Header",
										"value": "deleted-header-value",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{tyk-gateway.host}}/plugin-demo-api/anything/modify-headers",
									"protocol": "http",
									"host": [
										"{{tyk-gateway.host}}"
									],
									"path": [
										"plugin-demo-api",
										"anything",
										"modify-headers"
									]
								},
								"description": "This plugin can add and remove headers. In this example is adds a header called `New-Header` with the value `new-header-value`, and removes a header called `Delete-Header` which is sent in the request."
							},
							"response": []
						},
						{
							"name": "Plugin - Cache (part 1)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var tykGatewayHost = pm.variables.get(\"tyk-gateway.host\");",
											"",
											"var cacheRequest = {",
											"    url: 'http://' + tykGatewayHost + '/plugin-demo-api/uuid',",
											"    method: 'GET'",
											"};",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response is same across two requests\", function() {",
											"    var response1;",
											"    var response2;",
											"    pm.sendRequest(cacheRequest, function (err, response) {",
											"        response1 = response.json().uuid;",
											"        ",
											"         pm.sendRequest(cacheRequest, function (err, response) {",
											"            response2 = response.json().uuid;",
											"            pm.expect(response1).to.eql(response2);",
											"        });",
											"    });",
											"});",
											"",
											"pm.test(\"Cached response contains 'X-Tyk-Cached-Response' header set to '1'\", function() {",
											"    pm.sendRequest(cacheRequest, function (err, response) {",
											"         pm.sendRequest(cacheRequest, function (err, response) {",
											"            pm.expect(response.headers.get(\"X-Tyk-Cached-Response\")).to.eql(\"1\");",
											"        });",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-api-version",
										"type": "text",
										"value": "Default"
									}
								],
								"url": {
									"raw": "http://{{tyk-gateway.host}}/plugin-demo-api/uuid",
									"protocol": "http",
									"host": [
										"{{tyk-gateway.host}}"
									],
									"path": [
										"plugin-demo-api",
										"uuid"
									]
								},
								"description": "This request uses the `Cache` Endpoint Designer plugin to return a cached response directly from the Gateway when the API endpoint is called.\n\n- Global Cache is enabled\n- Response from Upstream will be cached for 5 seconds\n\n\nWhen this API executed, the response from upstream API server will be cached and served for upto 5 seconds to the subsequest requests made to same Endpoint. If the Gateway returns a cached response then it will also return a header `X-Tyk-Cached-Response` in the response with the value of `1`.\n\nThis plugin is defined in the Endpoint Designer of the API Definition. It is set to execute on requests for the `Default` version of the API only."
							},
							"response": []
						},
						{
							"name": "Plugin - Cache (part 2)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var tykGatewayHost = pm.variables.get(\"tyk-gateway.host\");",
											"",
											"// use a unique value in the path to create a new cache, so it doesn't interfere with postman-generated request",
											"var cacheEndpointRequest = {",
											"    url: 'http://' + tykGatewayHost + '/plugin-demo-api/cache-slow-endpoint?unique=' + pm.variables.replaceIn('{{$randomUUID}}'),",
											"    method: 'GET'",
											"};",
											"",
											"pm.test(\"Cached endpoint results in faster response\", function () {",
											"    pm.sendRequest(cacheEndpointRequest, function (err, response) {",
											"        pm.expect(response.code).to.eql(200);",
											"        // upstream endpoint has 3 second delay, so should be above 3 seconds for the first request",
											"        pm.expect(response.responseTime).to.be.above(3000);",
											"        // response should not have cache header",
											"        pm.expect(response.headers.get(\"X-Tyk-Cached-Response\")).to.be.undefined;",
											"",
											"        pm.sendRequest(cacheEndpointRequest, function (err, response) {",
											"            // second request is within rate limit",
											"            pm.expect(response.code).to.eql(200);",
											"            // this request should be dealt with by cache, so should be (much) less than 3 seconds",
											"            pm.expect(response.responseTime).to.be.below(3000);",
											"            // response should have cache header",
											"            pm.expect(response.headers.get(\"X-Tyk-Cached-Response\")).to.eql(\"1\");",
											"        });",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-api-version",
										"type": "text",
										"value": "Default"
									}
								],
								"url": {
									"raw": "http://{{tyk-gateway.host}}/plugin-demo-api/cache-slow-endpoint",
									"protocol": "http",
									"host": [
										"{{tyk-gateway.host}}"
									],
									"path": [
										"plugin-demo-api",
										"cache-slow-endpoint"
									]
								},
								"description": "This example uses the cache plugin to cache a slow endpoint, to provide a faster response.\n\nIt calls an endpoint which has a 3 second delay in responding, simulating a slow response. With caching enabled at the Gateway, the Gateway will cache the response so that subsequent requests which occur within the cache lifetime are served quickly, without the need to request another response from the slow endpoint.\n\nIn this case, the API cache configuration is set to 5 seconds, so the first request will take over 3 seconds to return, as it is fetched from the slow endpoint, but requests made during the following 5 seconds will be served from the cache, resulting in a much faster response. Try clicking the send button several times to see this in action."
							},
							"response": []
						},
						{
							"name": "Plugin - Ignore (part 1)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{tyk-gateway.host}}/basic-protected-api/anything/ignored",
									"protocol": "http",
									"host": [
										"{{tyk-gateway.host}}"
									],
									"path": [
										"basic-protected-api",
										"anything",
										"ignored"
									]
								},
								"description": "This request uses the **Ignore** Endpoint Designer plugin to access a protected API without providing any credentials. This API is configured to require the Client to authenticate using a token, with only the `/anything/ignored` path using the **Ignore** plugin. All other paths require authentication - see part 2.\n\nThe **Ignore** plugin instructs the Gateway to ignore the authentication settings defined in the API Definition. This allows API Clients to access ignored endpoints without providing any credentials. By default the plugin is case-sensitive, but can be configured to be case-insensitive when matching the path.\n\nThis plugin is useful in scenarios where there is a particular endpoint on the API Server that you would like to provide unauthenticated access to while keeping other endpoints protected. An authentication endpoint is a good example, where the Gateway will allow unauthenticated Clients to authenticate via the ignored endpoint, but require authentication for all other endpoints."
							},
							"response": []
						},
						{
							"name": "Plugin - Ignore (part 2)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{tyk-gateway.host}}/basic-protected-api/anything/not-ignored",
									"protocol": "http",
									"host": [
										"{{tyk-gateway.host}}"
									],
									"path": [
										"basic-protected-api",
										"anything",
										"not-ignored"
									]
								},
								"description": "This part of the **Ignore** Endpoint Designer plugin example shows that endpoints of this protected API cannot be accessed by authenticated clients.\n\nThe requested path `/anything/not-ignored` has no entry in the Endpoint Designer, so generates a `401 Unauthorized` response to unauthenticated clients."
							},
							"response": []
						},
						{
							"name": "Plugin - Validate JSON (part 1)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Error message is 'firstName: firstName is required'\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql(\"firstName: firstName is required\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"lastName\": \"Hoskins\",\n\t\"age\": 71\n}"
								},
								"url": {
									"raw": "http://{{tyk-gateway.host}}/plugin-demo-api/anything/validate-json",
									"protocol": "http",
									"host": [
										"{{tyk-gateway.host}}"
									],
									"path": [
										"plugin-demo-api",
										"anything",
										"validate-json"
									]
								},
								"description": "The Validate JSON plugin will validate the JSON in the request body against a JSON scheme defined in the plugin configuration. If the request fails validation then the API Gateway returns a `422 Unprocessable Entity` HTTP status and a detailed description of the problem in the response body.\n\nFor this example, the JSON sent in the request body did not include a `firstName` property, so the request is rejected with a response specifically referencing the missing property.\n\nFor reference, the JSON schema used in this example:\n\n```\n{\n  \"title\": \"Person\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"firstName\": {\n      \"type\": \"string\"\n    },\n    \"lastName\": {\n      \"type\": \"string\"\n    },\n    \"age\": {\n      \"description\": \"Age in years\",\n      \"type\": \"integer\",\n      \"minimum\": 0\n    }\n  },\n  \"required\": [\"firstName\", \"lastName\"]\n}\n```"
							},
							"response": []
						},
						{
							"name": "Plugin - Validate JSON (part 2)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Valid JSON data sent\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.json.age).to.eql(71);",
											"    pm.expect(jsonData.json.firstName).to.eql(\"Bob\");",
											"    pm.expect(jsonData.json.lastName).to.eql(\"Hoskins\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"firstName\": \"Bob\",\n\t\"lastName\": \"Hoskins\",\n\t\"age\": 71\n}"
								},
								"url": {
									"raw": "http://{{tyk-gateway.host}}/plugin-demo-api/anything/validate-json",
									"protocol": "http",
									"host": [
										"{{tyk-gateway.host}}"
									],
									"path": [
										"plugin-demo-api",
										"anything",
										"validate-json"
									]
								},
								"description": "This example sends a valid payload, so is accepted and a normal response is received from the API server."
							},
							"response": []
						},
						{
							"name": "Plugin - Request Size Limit (part 1)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error message is 'Request is too large'\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql(\"Request is too large\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "1234567890"
								},
								"url": {
									"raw": "http://{{tyk-gateway.host}}/plugin-demo-api/anything/request-size-limit",
									"protocol": "http",
									"host": [
										"{{tyk-gateway.host}}"
									],
									"path": [
										"plugin-demo-api",
										"anything",
										"request-size-limit"
									]
								},
								"description": "The Request Size Limit Plugin validates the size of the request body against defined maximum size in byte.\n\nIn this example, the plugin is configured to only allow requests with a maximum payload size of 9 bytes. The request sends a body with 10 bytes, so is rejected with a `400 Bad Request` response."
							},
							"response": []
						},
						{
							"name": "Plugin - Request Size Limit (part 2)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Request body is 9 bytes\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data).to.eql(\"123456789\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "123456789"
								},
								"url": {
									"raw": "http://{{tyk-gateway.host}}/plugin-demo-api/anything/request-size-limit",
									"protocol": "http",
									"host": [
										"{{tyk-gateway.host}}"
									],
									"path": [
										"plugin-demo-api",
										"anything",
										"request-size-limit"
									]
								},
								"description": "This example succeeds because the request is 9 bytes, which the same as the configured maximum value in the plugin."
							},
							"response": []
						},
						{
							"name": "Plugin - Method Transform",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Request method is changed to POST\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.method).to.eql(\"POST\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "http://{{tyk-gateway.host}}/plugin-demo-api/anything/method-transform",
									"protocol": "http",
									"host": [
										"{{tyk-gateway.host}}"
									],
									"path": [
										"plugin-demo-api",
										"anything",
										"method-transform"
									]
								},
								"description": "The Method Transform plugin changes the HTTP method used in the request. In this example, it changes the PUT method to a POST. Check the `method` property in the response body to see the method used."
							},
							"response": []
						},
						{
							"name": "Plugin - Track Endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{tyk-gateway.host}}/plugin-demo-api/anything/track-endpoint",
									"protocol": "http",
									"host": [
										"{{tyk-gateway.host}}"
									],
									"path": [
										"plugin-demo-api",
										"anything",
										"track-endpoint"
									]
								},
								"description": "The Track Endpoint plugin will record analytics about the number of times this individual endpoint has been requested. The analytics for this are visible in the Endpoint Popularity report in the Dashboard."
							},
							"response": []
						},
						{
							"name": "Plugin - Global Version Settings",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"'Global-Add' header added to request\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.headers['Global-Add']).to.eql(\"global-value\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "global-delete",
										"value": "deleted-header",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{tyk-gateway.host}}/plugin-demo-api/anything/global-version-settings",
									"protocol": "http",
									"host": [
										"{{tyk-gateway.host}}"
									],
									"path": [
										"plugin-demo-api",
										"anything",
										"global-version-settings"
									]
								},
								"description": "The Global Version Settings plugin are applied to all endpoints for the version of the API. This plugin allows you to delete and add headers to the request. \n\nFor this example, the plugin will delete the header `global-delete` and will add a header `global-add` with the value `global-value`. Check the response body and you will see the added header, but not the deleted header in the `headers` array.\n\nThis plugin has been configured for the `default` version of the Plugin Demo API, so you will it taking effect on any request using this API version."
							},
							"response": []
						},
						{
							"name": "Plugin - Virtual Endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present and set to 'text/plain; charset=utf-8'\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.response.to.be.header(\"Content-Type\", \"text/plain; charset=utf-8\")",
											"});",
											"",
											"pm.test(\"Response body is 'Virtual endpoint response body'\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Virtual endpoint response body\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{tyk-gateway.host}}/plugin-demo-api/anything/virtual-endpoint",
									"protocol": "http",
									"host": [
										"{{tyk-gateway.host}}"
									],
									"path": [
										"plugin-demo-api",
										"anything",
										"virtual-endpoint"
									]
								},
								"description": "The Virtual Endpoint plugin executes JavaScript to generate a response. The JavaScript is defined in the plugin or provided in a file. The JavaScript has access to special Tyk helper functions which make performing certain tasks easy:\n\n- Generating a response\n- Writing to the application log\n- Making an HTTP request\n\nThe JavaScript is executed by a JavaScript virtual machine which runs within the Gateway. When the plugin is run it provide access to the request data, session data and API configuration data. The plugin can also make requests out to other services, allowing for orchestration across multiple upstream API servers.\n\nIn this example, the plugin simply returns a basic plain text response with a `200 OK` status code."
							},
							"response": []
						},
						{
							"name": "Plugin - Whitelist (part 1)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-api-version",
										"value": "whitelist",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{tyk-gateway.host}}/plugin-demo-api/anything/whitelist",
									"protocol": "http",
									"host": [
										"{{tyk-gateway.host}}"
									],
									"path": [
										"plugin-demo-api",
										"anything",
										"whitelist"
									]
								},
								"description": "The Whitelist plugin causes the API Gateway to reject requests for any endpoints which are not explictly whitelisted. \n\nFor this example a separate version of the Plugin Demo API has been created, called `whitelist`, and it has a single endpoint defined `/anything/whitelist$`. The `$` at the end of the string is the regular expression character for 'end of the string', which if not used would mean that any paths which start `/anything/whitelist` i.e. `/anything/whitelist-123` would also be accepted."
							},
							"response": []
						},
						{
							"name": "Plugin - Whitelist (part 2)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Error message is 'Requested endpoint is forbidden'\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql(\"Requested endpoint is forbidden\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-api-version",
										"type": "text",
										"value": "whitelist"
									}
								],
								"url": {
									"raw": "http://{{tyk-gateway.host}}/plugin-demo-api/anything/whitelist-123",
									"protocol": "http",
									"host": [
										"{{tyk-gateway.host}}"
									],
									"path": [
										"plugin-demo-api",
										"anything",
										"whitelist-123"
									]
								},
								"description": "This request is rejected as the requested path `/anything/whitelist-123` has not been defined with the Whitelist plugin. The API Gateway responds with a `403 Forbidden` response."
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Versioning",
					"item": [
						{
							"name": "Versioning (part 1) - Mock response",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Mock response body returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.mock).to.eql(\"response\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-api-version",
										"value": "Default",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{tyk-gateway.host}}/plugin-demo-api/anything/mock",
									"protocol": "http",
									"host": [
										"{{tyk-gateway.host}}"
									],
									"path": [
										"plugin-demo-api",
										"anything",
										"mock"
									]
								},
								"description": "This request uses the `Mock Response` Endpoint Designer plugin to demonstrate versioning. It shows how the API Gateway can change behaviour based on the requested version of an API. Using API versioning allows you to redefine how the API Gateway will handle endpoint requests.\n\nThe API used here has two versions:\n- `Default`: the default version, used in this request, which returns a mock response directly from the Gateway\n- `2`: the second version, used in part 2, which returns a response from the API server\n\nBoth versions make a request to the same API and API endpoint. The versioning is controlled by the `x-api-version` header in the request, which the Gateway will check to decide how the handle the request."
							},
							"response": []
						},
						{
							"name": "Versioning (part 2) - Normal response",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Mock response body not returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.mock).not.eql(\"response\");",
											"});",
											"",
											"pm.test(\"Version 2 of the API was requested\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.headers[\"X-Api-Version\"]).to.eql(\"2\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-api-version",
										"type": "text",
										"value": "2"
									}
								],
								"url": {
									"raw": "http://{{tyk-gateway.host}}/plugin-demo-api/anything/mock",
									"protocol": "http",
									"host": [
										"{{tyk-gateway.host}}"
									],
									"path": [
										"plugin-demo-api",
										"anything",
										"mock"
									]
								},
								"description": "Part 2 of the versioning example. This request shows that when version `2` of the API is requested, the API Gateway proxies the request to the API server.\n\nThis request uses the same URL as part 1, but uses `2` as the value for the `x-api-version` request header."
							},
							"response": []
						},
						{
							"name": "Versioning (part 3) - Expired version",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Error message is 'Api Version has expired, please check documentation or contact administrator'\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql(\"Api Version has expired, please check documentation or contact administrator\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-api-version",
										"type": "text",
										"value": "expired"
									}
								],
								"url": {
									"raw": "http://{{tyk-gateway.host}}/plugin-demo-api/anything/mock",
									"protocol": "http",
									"host": [
										"{{tyk-gateway.host}}"
									],
									"path": [
										"plugin-demo-api",
										"anything",
										"mock"
									]
								},
								"description": "This request shows that version can be expired. In this case a version called `expired` was created with an expiry date in the past. This means that requests for this version are rejected by the Gateway, with a message provided in the response body which says the version has expired."
							},
							"response": []
						}
					]
				},
				{
					"name": "Advanced Options",
					"item": [
						{
							"name": "Webhooks - Authentication Failure",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"// Add test to check if webhook fired"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "auth-failure-key",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{tyk-gateway.host}}/basic-protected-api/get",
									"protocol": "http",
									"host": [
										"{{tyk-gateway.host}}"
									],
									"path": [
										"basic-protected-api",
										"get"
									]
								},
								"description": "This example makes an unauthenticated request to the `Basic Protected API`. The API requires authentication so the request fails, as expected, with a `403 Forbidden` response.\n\nThe `Basic Protected API` is configured to use a webhook in the event of authentication failure. This webhook calls another API, passing information about the failed request. You can see this webhook call in the Dashboard analytics, it's made to the `Webhook Receiver` API, and will appear straight after this failed API request to `Basic Protected API`. In the analytics record, check the body of the request to see origin of the request and key which was used.\n\nWebhooks can be set up to handle lots of different types of events, such as rate limit exceeded, quota exceeded etc. They can also be configured with a cooldown time so that the events don't overload the API receiving the webhooks."
							},
							"response": []
						},
						{
							"name": "Context Variables - Correlation Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"'X-Req-Id' header is a UUID\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.headers[\"X-Req-Id\"]).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{tyk-gateway.host}}/basic-open-api/get",
									"protocol": "http",
									"host": [
										"{{tyk-gateway.host}}"
									],
									"path": [
										"basic-open-api",
										"get"
									]
								},
								"description": "Header `X-Req-Id` is injected by the Gateway, and can be seen in the response body. \n\nThe header value is a GUID representing the random id assigned to each request by the Gateway. It is configured using the Tyk context variable `$tyk_context.request_id`.\n\nThe value is accessible to various parts of the Tyk middleware chain, so can be used as a reference when processing requests."
							},
							"response": []
						},
						{
							"name": "Segmentation (part 1) - Tags match",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var tykGatewayHost = pm.variables.get(\"tyk-gateway.host\");",
											"",
											"pm.test(\"Status code is 200 for tyk-gateway-2\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var segmentationTestRequest = {",
											"    url: 'http://' + tykGatewayHost + '/basic-open-api/get',",
											"    method: 'GET'",
											"};",
											"",
											"pm.sendRequest(segmentationTestRequest, function (err, response) { ",
											"    pm.test(\"Status code is 200 for tyk-gateway\", function () {",
											"        pm.expect(response.code).to.eql(200);",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{tyk-gateway-2.host}}/basic-open-api/get",
									"protocol": "https",
									"host": [
										"{{tyk-gateway-2.host}}"
									],
									"path": [
										"basic-open-api",
										"get"
									]
								},
								"description": "This request demonstrates the segmentation feature. It calls the **Basic Open API**, which has the `tyk-gateway-2` segment tag applied to it. \n\nThis means that the API will only be loaded by Gateways which are configured to use tags and also have the same tag (i.e. `tyk-gateway-2`). Gateways which have `node_is_segmented` set to `false` in `tyk.conf` (i.e. `tyk-gateway`) will load all API Definitions regardless of their tags.\n\nSee part 2 for an example of an API which is not available on both Gateways."
							},
							"response": []
						},
						{
							"name": "Segmentation (part 2) - Tags do not match",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var tykGatewayHost = pm.variables.get(\"tyk-gateway.host\");",
											"",
											"pm.test(\"Status code is 404 for tyk-gateway-2\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"var segmentationTestRequest = {",
											"    url: 'http://' + tykGatewayHost + '/basic-protected-api/get',",
											"    method: 'GET',",
											"    header: 'Authorization: auth_key'",
											"};",
											"",
											"pm.sendRequest(segmentationTestRequest, function (err, response) { ",
											"    pm.test(\"Status code is 200 for tyk-gateway\", function () {",
											"        pm.expect(response.code).to.eql(200);",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "auth_key"
									}
								],
								"url": {
									"raw": "https://{{tyk-gateway-2.host}}/basic-protected-api/get",
									"protocol": "https",
									"host": [
										"{{tyk-gateway-2.host}}"
									],
									"path": [
										"basic-protected-api",
										"get"
									]
								},
								"description": "This request shows that `tyk-gateway-2` is not able to proxy requests for the **Basic Protected API**. \n\nA `404 Not Found` response is returned when this API is requested. This is because the API does not have any segmentation tags applied, and `tyk-gateway-2` has the segmentation tag `tyk-gateway-2`, which means that it will only load API Definitions which also have this tag. \n\n**Basic Protected API** is available through `tyk-gateway`, as it does not have segmentation enabled. This is demonstrated in the test."
							},
							"response": []
						}
					]
				},
				{
					"name": "Core Settings",
					"item": [
						{
							"name": "Authentication",
							"item": [
								{
									"name": "Authentication Token",
									"item": [
										{
											"name": "Token authorization - failure (part 1)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 401\", function () {",
															"    pm.response.to.have.status(401);",
															"});",
															"",
															"pm.test(\"Error message is 'Authorization field missing'\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.error).to.eql(\"Authorization field missing\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "",
														"type": "text"
													}
												],
												"url": {
													"raw": "http://{{tyk-gateway.host}}/basic-protected-api/get",
													"protocol": "http",
													"host": [
														"{{tyk-gateway.host}}"
													],
													"path": [
														"basic-protected-api",
														"get"
													]
												},
												"description": "This API will showcase the Token authorization feature of Tyk.\n\nAn key is not provided in the HTTP header field `Authorization`, resulting in am HTTP status code `401 Unauthorized` returned by the Gateway."
											},
											"response": []
										},
										{
											"name": "Token authorization - failure (part 2)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {",
															"    pm.response.to.have.status(403);",
															"});",
															"",
															"pm.test(\"Error message is 'Access to this API has been disallowed'\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.error).to.eql(\"Access to this API has been disallowed\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "missing_key"
													}
												],
												"url": {
													"raw": "http://{{tyk-gateway.host}}/basic-protected-api/get",
													"protocol": "http",
													"host": [
														"{{tyk-gateway.host}}"
													],
													"path": [
														"basic-protected-api",
														"get"
													]
												},
												"description": "This request attempts to authenticate with a key which does not exist - `missing_key`.\n\nThis results in am HTTP status code `403 Forbidden` response from the Gateway."
											},
											"response": []
										},
										{
											"name": "Token authorization - success",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"'auth_key' used in 'Authorization' header\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.headers['Authorization']).to.eql(\"auth_key\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "auth_key",
														"type": "text"
													}
												],
												"url": {
													"raw": "http://{{tyk-gateway.host}}/basic-protected-api/get",
													"protocol": "http",
													"host": [
														"{{tyk-gateway.host}}"
													],
													"path": [
														"basic-protected-api",
														"get"
													]
												},
												"description": "This API showcases the Token authorization feature of Tyk.\n\nThe key is sent in the HTTP header field `Authorization`. It has been authorized access to the `Basic Protected API`, so the request is accepted by the Gateway."
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "JSON Web Token",
									"item": [
										{
											"name": "JWT - shared HMAC secret",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwicG9sIjoiNWVhZDcyOTU1NzU5NjEwMDAxODE4Njg4In0.8xOVZJM8Qi4XySrJRMZtaNkaq-Bw3am0gLHFKAHY5OQ",
														"type": "text"
													}
												],
												"url": {
													"raw": "http://{{tyk-gateway.host}}/jwt-api/get",
													"protocol": "http",
													"host": [
														"{{tyk-gateway.host}}"
													],
													"path": [
														"jwt-api",
														"get"
													]
												},
												"description": "This request uses JWT authentication using a shared HMAC secret. In this case, the secret is defined on the API definition, but it is also possible to define it separately, which allows multiple secrets to be used.\n\nThe JWT claims are processed as follows:\n\n* `sub`: This is the subject, and is used by Tyk as the identity of the API Client. Tyk creates a session based on the value provided here, which allows it to maintain state for the subject across multiple requests.\n* `pol`: This is the Id of the Policy to use, if the request is authenticated. If no Id is provided then the API Definition specifies a default Policy to use.\n\nFor reference, the payload of the JWT:\n\n```json\n{\n  \"sub\": \"1234567890\",\n  \"pol\": \"5ead72955759610001818688\"\n}\n```"
											},
											"response": []
										},
										{
											"name": "JWT - shared HMAC secret with claim (part 1)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwicG9saWN5X2NsYWltIjoicmVzdHJpY3RlZCJ9.nqQNDkB6--bOY48D2G8PZQSwvZduAqVWUUWTpyA1dDU"
													}
												],
												"url": {
													"raw": "http://{{tyk-gateway.host}}/jwt-api/anything/allowed-path",
													"protocol": "http",
													"host": [
														"{{tyk-gateway.host}}"
													],
													"path": [
														"jwt-api",
														"anything",
														"allowed-path"
													]
												},
												"description": "This request uses a claim in the JWT to define the Policy to use. In this case, the API Definition is configured to inspect the `policy_claim` claim and match the value (`restricted`) against the list defined in the API Definition. \n\nIn this case, the claim matches against the `JWT Policy Restricted` Policy, which uses path-based permissions to only allow requests for `GET /anything/allowed-path`. Requests for other endpoints will be rejected - see part 2.\n\nFor reference, the payload of the JWT:\n\n```json\n{\n  \"sub\": \"1234567890\",\n  \"policy_claim\": \"restricted\"\n}\n```"
											},
											"response": []
										},
										{
											"name": "JWT - shared HMAC secret with claim (part 2)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {",
															"    pm.response.to.have.status(403);",
															"});",
															"",
															"pm.test(\"Error message is `Access to this resource has been disallowed`\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.error).to.eql(\"Access to this resource has been disallowed\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwicG9saWN5X2NsYWltIjoicmVzdHJpY3RlZCJ9.nqQNDkB6--bOY48D2G8PZQSwvZduAqVWUUWTpyA1dDU"
													}
												],
												"url": {
													"raw": "http://{{tyk-gateway.host}}/jwt-api/anything/restricted-path",
													"protocol": "http",
													"host": [
														"{{tyk-gateway.host}}"
													],
													"path": [
														"jwt-api",
														"anything",
														"restricted-path"
													]
												},
												"description": "This request fails because it attempts to access an endpoint which is not listed in the path-based permissions defined in the Policy. The Gateway responds with a `403 Forbidden`."
											},
											"response": []
										}
									]
								},
								{
									"name": "Basic Authentication",
									"item": [
										{
											"name": "Basic Authentication",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YmFzaWMtYXV0aC11c2VybmFtZTpiYXNpYy1hdXRoLXBhc3N3b3Jk",
														"type": "text"
													}
												],
												"url": {
													"raw": "http://{{tyk-gateway.host}}/basic-authentication-api/get",
													"protocol": "http",
													"host": [
														"{{tyk-gateway.host}}"
													],
													"path": [
														"basic-authentication-api",
														"get"
													]
												},
												"description": "This request uses basic authentication to access the Basic Authentication API. Basic authenticate is based on a username and password.\n\nThe request has an `Authorization` header which has a value comprised of a prefix `Basic` and a base64 encoded representation of the credentials. The value used is the username and password separated with a colon. In this case the username is `basic-auth-username` and the password is `basic-auth-password`, so this gives `basic-auth-username:basic-auth-password`, which is `YmFzaWMtYXV0aC11c2VybmFtZTpiYXNpYy1hdXRoLXBhc3N3b3Jk` when base64 encoded."
											},
											"response": []
										}
									]
								},
								{
									"name": "Custom Authentication",
									"item": [
										{
											"name": "Custom Authentication - Go Plugin (part 1)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Custom key used for authentication\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.headers.Authorization).to.eql('go_plugin_key');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "go_plugin_key",
														"type": "text"
													}
												],
												"url": {
													"raw": "http://{{tyk-gateway.host}}/go-plugin-api/get",
													"protocol": "http",
													"host": [
														"{{tyk-gateway.host}}"
													],
													"path": [
														"go-plugin-api",
														"get"
													]
												},
												"description": "This request calls an API which is configured to use a Go plugin to perform authentication.\n\nThe plugin source is located at `/deployments/tyk/volumes/tyk-gateway/plugins/go/example/example-go-plugin.go`, and the resulting shared object file is referenced from the `auth_check` hook in the API Definition.\n\nThe functionality roughly follows the standard token auth processes. The key is analysed and loaded from the Redis storage. The access is authorised and a session object is created.\n\nThe plugin writes many entries to the application log, to show how it is processing the request."
											},
											"response": []
										},
										{
											"name": "Custom Authentication - Go Plugin (part 2)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 401\", function () {",
															"    pm.response.to.have.status(401);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "def",
														"type": "text"
													}
												],
												"url": {
													"raw": "http://{{tyk-gateway.host}}/go-plugin-api/get",
													"protocol": "http",
													"host": [
														"{{tyk-gateway.host}}"
													],
													"path": [
														"go-plugin-api",
														"get"
													]
												},
												"description": "This request uses an invalid key, so fails with an HTTP 401 response."
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Rate Limit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var tykGatewayHost = pm.variables.get(\"tyk-gateway.host\");",
											"",
											"// make a random id to use as our key id",
											"var keyId = pm.variables.replaceIn('{{$randomUUID}}');",
											"",
											"// create request object to generate test key",
											"// key uses the random id, so it doesn't interfere with any other keys",
											"// key has a rate limit of 2 requests every 10 seconds",
											"var rateLimitTestKeyCreateRequest = {",
											"  url: 'http://' + tykGatewayHost + '/tyk/keys/' + keyId,",
											"  method: 'POST',",
											"  header: 'x-tyk-authorization:28d220fd77974a4facfb07dc1e49c2aa',",
											"  body: {",
											"      mode: 'raw',",
											"      raw: JSON.stringify({\"last_check\":0,\"allowance\":0,\"rate\":2,\"per\":10,\"throttle_interval\":-1,\"throttle_retry_limit\":-1,\"date_created\":\"2020-04-23T04:40:22.3984988Z\",\"expires\":0,\"quota_max\":-1,\"quota_renews\":1587616821,\"quota_remaining\":-1,\"quota_renewal_rate\":-1,\"access_rights\":{\"accbdd1b89e84ec97f4f16d4e3197d5c\":{\"api_name\":\"Basic Protected API\",\"api_id\":\"accbdd1b89e84ec97f4f16d4e3197d5c\",\"versions\":[\"Default\"],\"allowed_urls\":[],\"limit\":null,\"allowance_scope\":\"\"}},\"org_id\":\"5e9d9544a1dcd60001d0ed20\",\"oauth_client_id\":\"\",\"oauth_keys\":null,\"certificate\":\"\",\"basic_auth_data\":{\"user\":\"\",\"password\":\"\",\"hash_type\":\"\"},\"jwt_data\":{\"secret\":\"\"},\"hmac_enabled\":false,\"hmac_string\":\"\",\"is_inactive\":false,\"apply_policy_id\":\"\",\"apply_policies\":[],\"data_expires\":0,\"monitor\":{\"trigger_limits\":null},\"enable_detail_recording\":false,\"meta_data\":{},\"tags\":[],\"alias\":\"\",\"last_updated\":\"1587616822\",\"id_extractor_deadline\":0,\"session_lifetime\":0})",
											"  }",
											"};",
											"",
											"// create the test key",
											"pm.sendRequest(rateLimitTestKeyCreateRequest, function (err, response) { ",
											"    ",
											"    // test key is now created, so we can start using it in tests",
											"    pm.test(\"Status code is 429\", function () {",
											"",
											"        // rate limit request object, using test key",
											"        var rateLimitRequest = {",
											"            url: 'http://' + tykGatewayHost + '/basic-protected-api/get',",
											"            method: 'GET',",
											"            header: 'Authorization:' + keyId",
											"        };",
											"        ",
											"        pm.sendRequest(rateLimitRequest, function (err, response) {",
											"            // first request is within rate limit",
											"            pm.expect(response.code).to.eql(200);",
											"",
											"            pm.sendRequest(rateLimitRequest, function (err, response) {",
											"                // second request is within rate limit",
											"                pm.expect(response.code).to.eql(200);",
											"",
											"                pm.sendRequest(rateLimitRequest, function (err, response) {",
											"                    // third request exceeds rate limit",
											"                    pm.expect(response.code).to.eql(429);",
											"                    ",
											"                    // tidy up - delete test key",
											"                    var rateLimitTestKeyDeleteRequest = {",
											"                        url: 'http://' + tykGatewayHost + '/tyk/keys/' + keyId,",
											"                        method: 'DELETE',",
											"                        header: 'x-tyk-authorization:28d220fd77974a4facfb07dc1e49c2aa'",
											"                    };",
											"                ",
											"                    pm.sendRequest(rateLimitTestKeyDeleteRequest, function (err, response) { });",
											"",
											"                });",
											"            });",
											"        });",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "ratelimit_key",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{tyk-gateway.host}}/basic-protected-api/get",
									"protocol": "http",
									"host": [
										"{{tyk-gateway.host}}"
									],
									"path": [
										"basic-protected-api",
										"get"
									]
								},
								"description": "This API will showcase the Rate limiting feature of Tyk.\n\nRate limit is set as 2 per 5 seconds. More than 2 request per 5 will result in `429  Too many requests` error from gateway."
							},
							"response": []
						},
						{
							"name": "Throttling",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var tykGatewayHost = pm.variables.get(\"tyk-gateway.host\");",
											"",
											"var keyId = pm.variables.replaceIn('{{$randomUUID}}');",
											"",
											"var throttlingTestKeyCreateRequest = {",
											"  url: 'http://' + tykGatewayHost + '/tyk/keys/' + keyId,",
											"  method: 'POST',",
											"  header: 'x-tyk-authorization:28d220fd77974a4facfb07dc1e49c2aa',",
											"  body: {",
											"      mode: 'raw',",
											"      raw: JSON.stringify({\"last_check\":0,\"allowance\":2,\"rate\":2,\"per\":5,\"throttle_interval\":5,\"throttle_retry_limit\":2,\"date_created\":\"2020-04-23T04:41:37.0404484Z\",\"expires\":0,\"quota_max\":-1,\"quota_renews\":1587616896,\"quota_remaining\":-1,\"quota_renewal_rate\":-1,\"access_rights\":{\"accbdd1b89e84ec97f4f16d4e3197d5c\":{\"api_name\":\"Basic Protected API\",\"api_id\":\"accbdd1b89e84ec97f4f16d4e3197d5c\",\"versions\":[\"Default\"],\"allowed_urls\":[],\"limit\":null,\"allowance_scope\":\"\"}},\"org_id\":\"5e9d9544a1dcd60001d0ed20\",\"oauth_client_id\":\"\",\"oauth_keys\":null,\"certificate\":\"\",\"basic_auth_data\":{\"user\":\"\",\"password\":\"\",\"hash_type\":\"\"},\"jwt_data\":{\"secret\":\"\"},\"hmac_enabled\":false,\"hmac_string\":\"\",\"is_inactive\":false,\"apply_policy_id\":\"\",\"apply_policies\":[],\"data_expires\":0,\"monitor\":{\"trigger_limits\":null},\"enable_detail_recording\":false,\"meta_data\":{},\"tags\":[],\"alias\":\"\",\"last_updated\":\"1587616897\",\"id_extractor_deadline\":0,\"session_lifetime\":0})",
											"  }",
											"};",
											"",
											"pm.sendRequest(throttlingTestKeyCreateRequest, function (err, response) { ",
											"    pm.test(\"Status code is 200\", function () {",
											"        var throttleRequest = {",
											"            url: 'http://' + tykGatewayHost + '/basic-protected-api/get',",
											"            method: 'GET',",
											"            header: 'Authorization:' + keyId",
											"        };",
											"        ",
											"        pm.sendRequest(throttleRequest, function (err, response) {",
											"            pm.expect(response.code).to.eql(200);",
											"",
											"            pm.sendRequest(throttleRequest, function (err, response) {",
											"                pm.expect(response.code).to.eql(200);",
											"",
											"                pm.sendRequest(throttleRequest, function (err, response) {",
											"                    pm.expect(response.code).to.eql(200);",
											"                    ",
											"                    var throttlingTestKeyDeleteRequest = {",
											"                            url: 'http://' + tykGatewayHost + '/tyk/keys/' + keyId,",
											"                            method: 'DELETE',",
											"                            header: 'x-tyk-authorization:28d220fd77974a4facfb07dc1e49c2aa'",
											"                        };",
											"                    ",
											"                    pm.sendRequest(throttlingTestKeyDeleteRequest, function (err, response) { });",
											"                });",
											"            });",
											"        });",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "throttle_key"
									}
								],
								"url": {
									"raw": "http://{{tyk-gateway.host}}/basic-protected-api/get",
									"protocol": "http",
									"host": [
										"{{tyk-gateway.host}}"
									],
									"path": [
										"basic-protected-api",
										"get"
									]
								},
								"description": "This API will showcase the Throttling feature of Tyk.\n\nRate limit is set as 2 per 5 seconds. Gateway Throttling is configured for 10 times with 1 sec interval. \n\nWe can obeserve a delay in response due to throttling after the rate limit has been reached."
							},
							"response": []
						},
						{
							"name": "Quota Limit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var tykGatewayHost = pm.variables.get(\"tyk-gateway.host\");",
											"",
											"var keyId = pm.variables.replaceIn('{{$randomUUID}}');",
											"",
											"var quotaTestKeyCreateRequest = {",
											"    url: 'http://' + tykGatewayHost + '/tyk/keys/' + keyId,",
											"    method: 'POST',",
											"    header: 'x-tyk-authorization:28d220fd77974a4facfb07dc1e49c2aa',",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({\"last_check\":0,\"allowance\":1000,\"rate\":1000,\"per\":60,\"throttle_interval\":-1,\"throttle_retry_limit\":-1,\"date_created\":\"2020-04-23T04:43:07.8812258Z\",\"expires\":0,\"quota_max\":2,\"quota_renews\":1587620587,\"quota_remaining\":2,\"quota_renewal_rate\":3600,\"access_rights\":{\"accbdd1b89e84ec97f4f16d4e3197d5c\":{\"api_name\":\"Basic Protected API\",\"api_id\":\"accbdd1b89e84ec97f4f16d4e3197d5c\",\"versions\":[\"Default\"],\"allowed_urls\":[],\"limit\":null,\"allowance_scope\":\"\"}},\"org_id\":\"5e9d9544a1dcd60001d0ed20\",\"oauth_client_id\":\"\",\"oauth_keys\":null,\"certificate\":\"\",\"basic_auth_data\":{\"user\":\"\",\"password\":\"\",\"hash_type\":\"\"},\"jwt_data\":{\"secret\":\"\"},\"hmac_enabled\":false,\"hmac_string\":\"\",\"is_inactive\":false,\"apply_policy_id\":\"\",\"apply_policies\":[],\"data_expires\":0,\"monitor\":{\"trigger_limits\":null},\"enable_detail_recording\":false,\"meta_data\":{},\"tags\":[],\"alias\":\"\",\"last_updated\":\"1587616987\",\"id_extractor_deadline\":0,\"session_lifetime\":0})",
											"  }",
											"};",
											"",
											"pm.sendRequest(quotaTestKeyCreateRequest, function (err, response) { ",
											"    pm.test(\"Status code is 403\", function () {",
											"        var quotaRequest = {",
											"            url: 'http://' + tykGatewayHost + '/basic-protected-api/get',",
											"            method: 'GET',",
											"            header: 'Authorization:' + keyId",
											"        };",
											"        ",
											"        pm.sendRequest(quotaRequest, function (err, response) {",
											"            pm.expect(response.headers.get(\"X-Ratelimit-Remaining\")).to.eql(\"1\");",
											"            pm.expect(response.code).to.eql(200);",
											"            ",
											"            pm.sendRequest(quotaRequest, function (err, response) {",
											"                pm.expect(response.headers.get(\"X-Ratelimit-Remaining\")).to.eql(\"0\");",
											"                pm.expect(response.code).to.eql(200);",
											"                ",
											"                pm.sendRequest(quotaRequest, function (err, response) {",
											"                    pm.expect(response.code).to.eql(403);",
											"                    ",
											"                    var quotaTestKeyDeleteRequest = {",
											"                        url: 'http://' + tykGatewayHost + '/tyk/keys/' + keyId,",
											"                        method: 'DELETE',",
											"                        header: 'x-tyk-authorization:28d220fd77974a4facfb07dc1e49c2aa'",
											"                    };",
											"                ",
											"                    pm.sendRequest(quotaTestKeyDeleteRequest, function (err, response) { });",
											"                });",
											"            });",
											"        });",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "quota_key"
									}
								],
								"url": {
									"raw": "http://{{tyk-gateway.host}}/basic-protected-api/get",
									"protocol": "http",
									"host": [
										"{{tyk-gateway.host}}"
									],
									"path": [
										"basic-protected-api",
										"get"
									]
								},
								"description": "This API will showcase the Quota limiting feature of Tyk.\n\nQuota limit is set as 2 per hour. More than 2 request per hour will result in `403 Forbidden` error from gateway."
							},
							"response": []
						},
						{
							"name": "Load Balancing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var tykGatewayHost = pm.variables.get(\"tyk-gateway.host\");",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Consecutive requests go to different hosts\", function () {",
											"    var response1Host;",
											"    var response2Host;",
											"    var loadBalancedRequest = {",
											"        url: 'http://' + tykGatewayHost + '/load-balanced-api/get',",
											"        method: 'GET'",
											"    };",
											"    ",
											"    pm.sendRequest(loadBalancedRequest, function (err, response1) {",
											"        pm.response.to.have.status(200);",
											"        response1Host=response1.json().headers.Host;",
											"        pm.expect(response1Host).to.match(/^httpbin2?$/);",
											"        ",
											"        pm.sendRequest(loadBalancedRequest, function (err, response2) {",
											"            pm.response.to.have.status(200);",
											"            response2Host=response2.json().headers.Host;",
											"            pm.expect(response2Host).to.match(/^httpbin2?$/);",
											"            pm.expect(response1Host).to.not.eql(response2Host);",
											"        });",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{tyk-gateway.host}}/load-balanced-api/get",
									"protocol": "http",
									"host": [
										"{{tyk-gateway.host}}"
									],
									"path": [
										"load-balanced-api",
										"get"
									]
								},
								"description": "This request calls an API Definition which is configured to load balance the proxied requests across multiple upstream hosts. The API Definition specifies two hosts, `httpbin` and `httpbin2`. The Gateway uses round-robin load balancing, so each host is called in turn.\n\nCheck the `headers.Host` property of the response body, it will alternative between `httpbin` and `httpbin2`. This shows that the Gateway is load balancing the upstream requests."
							},
							"response": []
						},
						{
							"name": "Uptime Tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var tykGatewayHost = pm.variables.get(\"tyk-gateway.host\");",
											"",
											"var uptimeTestAPIRequest = {",
											"  url: 'http://' + tykGatewayHost + '/uptime-test-api/get',",
											"  method: 'GET'",
											"};",
											"",
											"pm.sendRequest(uptimeTestAPIRequest, function (err, response) { ",
											"    // if response is not 404, then the API is active and should be tested, otherwise skip tests",
											"    if (response.code != 404)",
											"    {",
											"        pm.test(\"Status code is 200\", function () {",
											"            pm.response.to.have.status(200);",
											"        });",
											"",
											"        pm.test(\"Host is httpbin2\", function () {",
											"            var jsonData = pm.response.json();",
											"            pm.expect(jsonData.headers.Host).to.eql(\"httpbin2\");",
											"        });",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{tyk-gateway.host}}/uptime-test-api/get",
									"protocol": "http",
									"host": [
										"{{tyk-gateway.host}}"
									],
									"path": [
										"uptime-test-api",
										"get"
									]
								},
								"description": "**Note:** The API for this request must be activated before running the request. The API is inactive by default to prevent failing uptime tests from repeatedly generating error messages in the application logs. To activate the API, log in to the Dashboard, edit the 'Uptime Test API', set `active` to `true` (you can click the 'API Inactive' button) then update the API.\n\n***\n\nThis request calls an API which uses Uptime Tests to monitor the health of the upstream hosts it is configured to proxy requests to.\n\nIn this case, it is configred load balance requests upstream to `httpbin` and `httpbin2`. An uptime test has been added to the API Definition which calls the `status/500` endpoint of the `httpbin` host. This endpoint always returns `HTTP 500` status codes, which causes the uptime test to fail, triggering the removal of the `httpbin` host from the load balancer. This means that requests sent to this API will only be proxied to the `httpbin2` host, since the `httpbin` host has been marked as unhealthy.\n\nCheck the `headers.Hosts` property of the response body. This will always show `httpbin2`.\n\nIn order for the Gateway to remove the unhealthy host from the load balancer, the API Definition must have both nn Uptime Test using the same hostname, and the `check_host_against_uptime_tests` property set to `true`. If `check_host_against_uptime_tests` is not set to `true` then the unhealthy host will not be removed from the load balancer, only an event will be raised.\n\n**Note**: To reduce the amount of warning messages in the Gateway application log generated by failing tests, the uptime tests have been configured to run every 30 seconds. This means that on initial startup, the Gateway will proxy to both hosts (`httpbin` and `httpbin2`) until the first Uptime Test is run."
							},
							"response": []
						},
						{
							"name": "Custom Domain",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{tyk-custom-domain.host}}/get",
									"protocol": "http",
									"host": [
										"{{tyk-custom-domain.host}}"
									],
									"path": [
										"get"
									]
								},
								"description": "This request is uses a custom hostname to demonstrate the **Custom Domain** functionality. This enables API Defintions to be mapped against the hostname and the path of the request. In this instance, there is an API Definition which is configured to use Custom Domain `custom-domain.localhost` and path `/`. This allows the path for the upstream API to be the only element in the request path i.e. `/get`, since the Gateway no longer has to rely on the path as the only means to identify the API being requested."
							},
							"response": []
						}
					]
				},
				{
					"name": "GraphQL",
					"item": [
						{
							"name": "GraphQL - Proxy to external GraphQL API (part 1)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Country data returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.country.code).to.eql(\"GB\");",
											"    pm.expect(jsonData.data.country.name).to.eql(\"United Kingdom\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\n  country(code: \"GB\") {\n    code\n    name\n  }\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "http://{{tyk-gateway.host}}/graphql-countries/",
									"protocol": "http",
									"host": [
										"{{tyk-gateway.host}}"
									],
									"path": [
										"graphql-countries",
										""
									]
								},
								"description": "This request demonstrates the Gateways ability to proxy GraphQL requests to a target GraphQL API. It calls the **GraphQL Countries** API, which is configured to proxy requests to an external GraphQL API https://countries.trevorblades.com/.\n\nThe body of the request is a GraphQL query, which requests a **country** object which has a **code** equal to **GB**, returning the fields **code** and **name**. The API Definition is set up to only allow these fields, even though the target API contains many additional fields.\n\nThe **Country** data returned in the response matches the code **GB**."
							},
							"response": []
						},
						{
							"name": "GraphQL - Proxy to external GraphQL API (part 2)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Contextual error message: Currency field not defined\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"field: currency not defined on type: Country\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\n  country(code: \"GB\") {\n    code\n    name\n    currency\n  }\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "http://{{tyk-gateway.host}}/graphql-countries/",
									"protocol": "http",
									"host": [
										"{{tyk-gateway.host}}"
									],
									"path": [
										"graphql-countries",
										""
									]
								},
								"description": "Part 2 of the GraphQL requests makes a request for a field which does not exist in the *Schema* defined on the API Definition.\n\nThe **currency** field does not exist in the schema, and as such the request is rejected by the Gateway, returning an HTTP 400 response. The target API does actually have this field, but since the API Gateway does not list it in the schema it cannot be requested.\n\nThe response contains a contextual error message which identifies that the **currency** field is not defined for the type **Country**. This allows the API Client is understand why the request was rejected."
							},
							"response": []
						},
						{
							"name": "GraphQL - Combine 3 separate REST responses",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Data for user ID 1 is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.user.id).to.eql(1);",
											"    pm.expect(jsonData.data.user.posts[0].id).to.eql(1);",
											"    pm.expect(jsonData.data.user.posts[0].comments[0].id).to.eql(1);",
											"    pm.expect(jsonData.data.user.name).to.eql(\"Leanne Graham\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query{\n  user(id: 1){\n    id\n    name\n    email\n    posts{\n      id\n      title\n      body\n      comments{\n        id\n        name\n        email\n        body\n        }\n      }\n   }\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "http://{{tyk-gateway.host}}/graphql-posts/",
									"protocol": "http",
									"host": [
										"{{tyk-gateway.host}}"
									],
									"path": [
										"graphql-posts",
										""
									]
								},
								"description": "This GraphQL API illustrates, with a single request, the ability to combine 3 requests destined for 3 DataSources (all of which are of type REST) listed below:\n* <div style=\"display: inline\">https://jsonplaceholder.typicode.com/users/{{.arguments.id}} </div>\n* <div style=\"display: inline\">https://jsonplaceholder.typicode.com/posts?userId={{.object.id}} </div>\n* <div style=\"display: inline\">https://jsonplaceholder.typicode.com/comments?postId={{.object.id}} </div>\n\nKey Concept #1 - GraphQL\n\nGraphQL is able to make calls to multiple DataSources with a single request to the following upstream endpoints:\n* /users\n* /posts\n* /comments\n\nKey Concept #2 - Universal Data Graph\n\nUniversal Data Graph uses what are known as **arguments** which are values used in the URL by the DataSource to retreive data. In the call to the **/users** endpoint, an argument is passed to reference the ID of the user. The GraphQL engine takes the argument with the name **id** and uses it in the URL to make the request to the REST API."
							},
							"response": []
						}
					]
				},
				{
					"name": "Universal Data Graph",
					"item": [
						{
							"name": "Unversal Data Graph - Composed API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Combined data is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.country.code).to.eql(\"GB\");",
											"    pm.expect(jsonData.data.country.name).to.eql(\"United Kingdom\");",
											"    pm.expect(jsonData.data.country.pop).to.eql(65110000);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\n  country(code: \"GB\") {\n    code\n    name\n    pop\n  }\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "http://{{tyk-gateway.host}}/universal-data-graph-composed/",
									"protocol": "http",
									"host": [
										"{{tyk-gateway.host}}"
									],
									"path": [
										"universal-data-graph-composed",
										""
									]
								},
								"description": "This request is for a composed GraphQL API. This means that the Gateway takes the request and generates the response by calling multiple upstream APIs and combining the responses together.\n\nThe **Universal Data Graph** can target APIs already defined in Tyk and also external APIs. The API Definition for the API called in this example uses **DataSources** to target two APIs. One is another GraphQL API, **GraphQL Countries**, which already exists as an API Definition. The other is a REST API which is not defined as an API Definition, and is defined as a URL which the Universal Data Graph will make a request to.\n\nAll the data is combined in to a single response. The schema in the API Definition defines how this is achieved:\n\n- The Universal Data Graph takes the query contained in the body of the request and provides the **code** property as an **argument** to the GraphQL Countries API. It also uses the code as an argument in the request to the REST API, placing the value in the URL called by the Universal Data Graph.\n- The data returned by the REST API is mapped on the API's schema by using a **field mapping**. This maps the field **population** in the REST API response to the **pop** property in the API's schema. Field mapping enables fields to be renamed to fit with the desired schema."
							},
							"response": []
						}
					]
				},
				{
					"name": "Detailed Analytics Logging",
					"item": [
						{
							"name": "Detailed Analytics - Off, Global",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{tyk-gateway.host}}/basic-open-api/get",
									"protocol": "http",
									"host": [
										"{{tyk-gateway.host}}"
									],
									"path": [
										"basic-open-api",
										"get"
									]
								},
								"description": "This request shows how [detailed analytics logging](https://tyk.io/docs/analytics-and-reporting/useful-debug-modes/#enabling-detailed-logging) can be configured at a **global** (Gateway) level. Detailed analytics data will be recorded if it is enabled at any of the three levels - global, API and key.\n\nThe Gateway host targetted by this request, `tyk-gateway.localhost`, has it's configuration `analytics_config.enable_detailed_recording` set to `false`.\n\nThis example *does not* record detailed analytics data because it:\n- goes to an API Gateway that does not have detailed analytics recording enabled (**global** level), and\n- calls an API Definition that does not have detailed analytics recording enabled (**API** level), and\n- uses no API key, so cannot have detailed analytics recording enabled at **key** level"
							},
							"response": []
						},
						{
							"name": "Detailed Analytics - On, Global",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{tyk-gateway-2.host}}/basic-open-api/get",
									"protocol": "https",
									"host": [
										"{{tyk-gateway-2.host}}"
									],
									"path": [
										"basic-open-api",
										"get"
									]
								},
								"description": "This request shows how [detailed analytics logging](https://tyk.io/docs/analytics-and-reporting/useful-debug-modes/#enabling-detailed-logging) can be configured at a **global** (Gateway) level. Detailed analytics data will be recorded if it is enabled at any of the three levels - global, API and key.\n\nThe Gateway host targetted by this request, `tyk-gateway-2.localhost`, has it's configuration `analytics_config.enable_detailed_recording` set to `true`.\n\nThis example *does* record detailed analytics data because it:\n- goes to an API Gateway that has detailed analytics recording enabled (**global** level)"
							},
							"response": []
						},
						{
							"name": "Detailed Analytics - Off, API",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{tyk-gateway.host}}/detailed-analytics-off/get",
									"protocol": "http",
									"host": [
										"{{tyk-gateway.host}}"
									],
									"path": [
										"detailed-analytics-off",
										"get"
									]
								},
								"description": "This request shows how [detailed analytics logging](https://tyk.io/docs/analytics-and-reporting/useful-debug-modes/#enabling-detailed-logging) can be configured at an **API** level. Detailed analytics data will be recorded if it is enabled at any of the three levels - global, API and key.\n\nThe API targetted by this request, `detailed-analytics-off`, has it's configuration `enable_detailed_recording` set to `false`.\n\nThis example *does not* record detailed analytics data because it:\n- goes to an API Gateway that does not have detailed analytics recording enabled (**global** level), and\n- calls an API Definition that does not have detailed analytics recording enabled (**API** level), and\n- uses no API key, so cannot have detailed analytics recording enabled at **key** level"
							},
							"response": []
						},
						{
							"name": "Detailed Analytics - On, API",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{tyk-gateway.host}}/detailed-analytics-on/get",
									"protocol": "http",
									"host": [
										"{{tyk-gateway.host}}"
									],
									"path": [
										"detailed-analytics-on",
										"get"
									]
								},
								"description": "This request shows how [detailed analytics logging](https://tyk.io/docs/analytics-and-reporting/useful-debug-modes/#enabling-detailed-logging) can be configured at an **API** level. Detailed analytics data will be recorded if it is enabled at any of the three levels - global, API and key.\n\nThe API targetted by this request, `detailed-analytics-on`, has it's configuration `enable_detailed_recording` set to `true`.\n\nThis example *does* record detailed analytics data because it:\n- goes to an API Gateway that does not have detailed analytics recording enabled (**global** level), but\n- calls an API Definition that has detailed analytics recording enabled (**API** level)"
							},
							"response": []
						},
						{
							"name": "Detailed Analytics - Off, Key",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "auth_key",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{tyk-gateway.host}}/basic-protected-api/get",
									"protocol": "http",
									"host": [
										"{{tyk-gateway.host}}"
									],
									"path": [
										"basic-protected-api",
										"get"
									]
								},
								"description": "This request shows how [detailed analytics logging](https://tyk.io/docs/analytics-and-reporting/useful-debug-modes/#enabling-detailed-logging) can be configured at a **Key** level. Detailed analytics data will be recorded if it is enabled at any of the three levels - global, API and key.\n\nThe Key used by this request, `auth_key`, has it's configuration `enable_detailed_recording` set to `false`.\n\nThis example *does not* record detailed analytics data because it:\n- goes to an API Gateway that does not have detailed analytics recording enabled (**global** level), and\n- calls an API Definition that does not have detailed analytics recording enabled (**API** level), and\n- uses an API key that does not have detailed analytics recording enabled (**key** level)"
							},
							"response": []
						},
						{
							"name": "Detailed Analytics - On, Key",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "auth_key_analytics_on"
									}
								],
								"url": {
									"raw": "http://{{tyk-gateway.host}}/basic-protected-api/get",
									"protocol": "http",
									"host": [
										"{{tyk-gateway.host}}"
									],
									"path": [
										"basic-protected-api",
										"get"
									]
								},
								"description": "This request shows how [detailed analytics logging](https://tyk.io/docs/analytics-and-reporting/useful-debug-modes/#enabling-detailed-logging) can be configured at a **Key** level. Detailed analytics data will be recorded if it is enabled at any of the three levels - global, API and key.\n\nThe Key used by this request, `auth_key_analytics_on`, has it's configuration `enable_detailed_recording` set to `true`.\n\nThis example *does* record detailed analytics data because it:\n- goes to an API Gateway that does not have detailed analytics recording enabled (**global** level), and\n- calls an API Definition that does not have detailed analytics recording enabled (**API** level), but\n- uses an API key that has detailed analytics recording enabled (**key** level)"
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "System Management",
			"item": [
				{
					"name": "Importing Data",
					"item": [
						{
							"name": "Import custom key (part 1)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response action is `added`\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.action).to.eql(\"added\");",
											"});",
											"",
											"pm.test(\"Response key is not empty\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.key.length).to.be.above(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-tyk-authorization",
										"value": "28d220fd77974a4facfb07dc1e49c2aa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"last_check\": 0,\n    \"allowance\": 1000,\n    \"rate\": 1000,\n    \"per\": 60,\n    \"throttle_interval\": -1,\n    \"throttle_retry_limit\": -1,\n    \"expires\": 0,\n    \"quota_max\": -1,\n    \"quota_renews\": 1587521934,\n    \"quota_remaining\": -1,\n    \"quota_renewal_rate\": -1,\n    \"access_rights\": {\n        \"accbdd1b89e84ec97f4f16d4e3197d5c\": {\n            \"api_name\": \"Basic Protected API\",\n            \"api_id\": \"accbdd1b89e84ec97f4f16d4e3197d5c\",\n            \"versions\": [\n                \"Default\"\n            ],\n            \"allowed_urls\": [],\n            \"limit\": null,\n            \"allowance_scope\": \"\"\n        }\n    },\n    \"org_id\": \"5e9d9544a1dcd60001d0ed20\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{tyk-gateway.host}}/tyk/keys/my-custom-key",
									"protocol": "http",
									"host": [
										"{{tyk-gateway.host}}"
									],
									"path": [
										"tyk",
										"keys",
										"my-custom-key"
									]
								},
								"description": "This request uses the Gateway API to import a custom key. The Gateway API is used as the Gateway is responsible for managing keys.\n\nThe URL defines the id that the key will be assigned, in this instance `my-custom-key`, which is very different to the random values assigned by the Gateway when creating keys normally.\n\nOnce imported, the key can be used to access the `Basic Protected API` (see part 2), as defined in the `access_rights` section of the key definition JSON (see request Body)."
							},
							"response": []
						},
						{
							"name": "Import custom key (part 2)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Custom key was used\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.headers[\"Authorization\"]).to.eql(\"my-custom-key\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "my-custom-key",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{tyk-gateway.host}}/basic-protected-api/get",
									"protocol": "http",
									"host": [
										"{{tyk-gateway.host}}"
									],
									"path": [
										"basic-protected-api",
										"get"
									]
								},
								"description": "This request uses the custom key imported in Part 1 (which must be run prior to this) to access a protected API.\n\nThe custom key is provided in the `Authorization` header of the request."
							},
							"response": []
						}
					]
				},
				{
					"name": "Scaling",
					"item": [
						{
							"name": "Send request to additional Gateway",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{tyk-gateway-2.host}}/plugin-demo-api/anything/mock",
									"protocol": "https",
									"host": [
										"{{tyk-gateway-2.host}}"
									],
									"path": [
										"plugin-demo-api",
										"anything",
										"mock"
									]
								},
								"description": "This request is sent to the container mapped on port `8081`. It is the TLS-enabled Gateway which is otherwise configured the same as the HTTP-only Gateway.\n\nYou can use the `add-gateway.sh` script to add more Gateways. Note that in order to access them using this request, you will need to use `http` and change the port number - the Gateway created by the script has a random port assigned to it."
							},
							"response": []
						}
					]
				},
				{
					"name": "Health Check",
					"item": [
						{
							"name": "Gateway Health Check",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Gateway status is pass\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"pass\");",
											"});",
											"",
											"pm.test(\"Dashboard status is pass\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.details[\"dashboard\"].status).to.eql(\"pass\");",
											"});",
											"",
											"pm.test(\"Redis status is pass\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.details[\"redis\"].status).to.eql(\"pass\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{tyk-gateway.host}}/hello",
									"protocol": "http",
									"host": [
										"{{tyk-gateway.host}}"
									],
									"path": [
										"hello"
									]
								},
								"description": "This request calls the Gateway's health check endpoint. The default endpoint for this is `/hello`, but this can be altered by setting the `health_check_endpoint_name` value in the Gateway's configuration file `tyk.conf`.\n\nThe health check endpoint can be used by network components, such as load balancers, to avoid sending traffic to unhealthy instances.\n\nThe endpoint implements the [Heath Check Response Format](https://tools.ietf.org/id/draft-inadarei-api-health-check-01.html) defined by the IETF. This provides information about both the Gateway's health and the health of the Gateway's dependencies. The dependencies are Redis and, depending on configuration, the Tyk Dashboard or Multi Data Centre Bridge.\n\nThe `status` property returned in the response body can have the following values:\n- `pass`: healthy\n- `fail`: unhealthy\n- `warn`: healthy, with some concerns\n\nIn this scenario, the `status` returned in the body should be `pass`, as the Gateway and it's dependancies, `dashboard` and `redis`, should not be experiencing any problems."
							},
							"response": []
						}
					]
				},
				{
					"name": "Multi-tenancy",
					"item": [
						{
							"name": "Basic Test Request for Acme Organisation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Acme organisation header is present\", function () {",
											"    pm.expect(pm.response.headers.get('Organisation')).to.eql('Acme');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{tyk-gateway.host}}/httpbin-acme/get",
									"protocol": "http",
									"host": [
										"{{tyk-gateway.host}}"
									],
									"path": [
										"httpbin-acme",
										"get"
									]
								},
								"description": "This request makes a request for a basic API set up in the Acme Organisation. This is to demonstrate that Tyk can handle multiple tenants in a single deployment. The response contains a custom header `Organisation: Acme` which is injected by the Gateway for the API definition managed by the Acme Organisation.\n\nWhen a tenant logs into the Dashboard, they can only access and manage data within their own Organisation.\n\nAPIs from mulitple Organisations can be deployed to the same set of Gateways. Alternatively, API tagging or MDCB deployments can be used to segregate APIs onto separate Gateways."
							},
							"response": []
						}
					]
				},
				{
					"name": "Single Sign-On",
					"item": [
						{
							"name": "Dashboard SSO - request login token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Message confirms SSO Nonce created\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.Message).to.eql(\"SSO Nonce created\");",
											"});",
											"",
											"pm.test(\"SSO nonce not empty\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.Meta).length.greaterThan(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "admin-auth",
										"value": "ff8289874f5d45de945a2ea5c02580fe",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"ForSection\": \"dashboard\",\n  \"OrgID\": \"5e9d9544a1dcd60001d0ed20\",\n  \"EmailAddress\": \"\",\n  \"GroupID\": \"5f8ff13d046775000175a8c3\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{tyk-dashboard.host}}/admin/sso",
									"protocol": "http",
									"host": [
										"{{tyk-dashboard.host}}"
									],
									"path": [
										"admin",
										"sso"
									]
								},
								"description": "This request calls the Dashboard Admin API SSO endpoint to generate a one-time use login token.\n\nThe request body specifies the context in which the login token can be used:\n- `ForSection`: Either `dashboard` or `portal`\n- `OrgId`: Defines the Organisation context for the session\n- `EmailAddress`: If provided, will lookup the email address and log in the session as that user\n- `GroupId`: If provided, will lookup the user group and assign it to the session\n\nIf the request is successful, the response will have a `200 OK` status and the body will contain a property called `Meta`, the value of which is the login token. This token can then be used to call the SSO endpoint of the Dashboard or Portal to generate the session and log into the application.\n\nThe Standard Dashboard API can also be used for SSO, as it has an equivilant SSO endpoint `/api/sso`, which requires authentication using a Dashboard User's API access token via the `authorization` header.\n\n### Using the login token\n\nCreate the SSO login URL by combining the SSO endpoint URL (http://tyk-dashboard.localhost:3000/tap?nonce=) with the login token value (`Meta` property returned the response) e.g. `ZDhlNDY4ODktMzU2MC00ZmQwLTY5Y2MtZTcxYzNkNGYzYTJl`. Use the resulting URL your browser. You will then be logged into the Dashboard.\n\nFor example http://tyk-dashboard.localhost:3000/tap?nonce=ZDhlNDY4ODktMzU2MC00ZmQwLTY5Y2MtZTcxYzNkNGYzYTJl (Note, this URL will not work, it's just an example.)"
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Gateway Configuration",
			"item": [
				{
					"name": "TLS",
					"item": [
						{
							"name": "TLS request to Gateway",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{tyk-gateway-2.host}}/basic-open-api/get",
									"protocol": "https",
									"host": [
										"{{tyk-gateway-2.host}}"
									],
									"path": [
										"basic-open-api",
										"get"
									]
								},
								"description": "This request uses the HTTPS scheme to connect to the API Gateway. The Gateway is configured to listen for requests on `tyk-gateway-2.localhost:8081` and use a locally stored self-signed certificate.\n\nThis is configured in the `http_server_options` section of the Gateway's configuration file.\n**Note:** self-signed cetificates will fail verification by an API client, which will prevent the request for working. To resolve this, configure your client to allow self-signed certificates."
							},
							"response": []
						}
					]
				},
				{
					"name": "Error Templates",
					"item": [
						{
							"name": "Custom Error Templates",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Error message is 'Authorization field missing'\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql(\"Authorization field missing\");",
											"});",
											"",
											"pm.test(\"Response contains custom error message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.customErrorTemplate).to.eql(\"This is a custom error response template for HTTP 401 responses using JSON\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{tyk-gateway.host}}/basic-protected-api/get",
									"protocol": "http",
									"host": [
										"{{tyk-gateway.host}}"
									],
									"path": [
										"basic-protected-api",
										"get"
									]
								},
								"description": "This request demonstrates how Error Templates enable the responses returned by the Gatewey to be customised.\n\nIn this case, a 401 response is generated as no authentication is provided in the request. To generate the response, the Gateway checks the `templates` directory for a file called `error_401.json`. If the file exists, then it will use that as a template to generate the response. If not, then it will use the default `error.json` file. \n\nThe custom template contains an addition property `customErrorTemplate` which contains a message, and also the error message generated by the Gateway. The error message is injected into the output using the Go templating syntax `{{.Message}}`.\n\nThe Gateway uses the HTTP response code and the content-type of the request to define which file it will check for. This allows for different templates to use used for different HTTP response codes. JSON and XML are the supported content types.\n\nError Templates do not affect responses returned from the upstream API server, only responses Generated directly from the Gateway itself."
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Dashboard Admin API",
			"item": [
				{
					"name": "Get Organisations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "admin-auth",
								"value": "ff8289874f5d45de945a2ea5c02580fe",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://{{tyk-dashboard.host}}/admin/organisations",
							"protocol": "http",
							"host": [
								"{{tyk-dashboard.host}}"
							],
							"path": [
								"admin",
								"organisations"
							]
						},
						"description": "This request gets all the Organisations. These are the root objects in the Dashboard database, which other objects are linked to.\n\nOrganistaions enable multi-tenancy in the Tyk Dashboard."
					},
					"response": []
				}
			]
		},
		{
			"name": "Gateway Functionality",
			"item": [
				{
					"name": "Batch request processing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"relative_url for 1st response is /get\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].relative_url).to.eql(\"/get\");",
									"});",
									"",
									"pm.test(\"code for 1st response is 200\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].code).to.eql(200);",
									"});",
									"",
									"pm.test(\"relative_url for 2nd response is /uuid\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1].relative_url).to.eql(\"/uuid\");",
									"});",
									"",
									"pm.test(\"code for 2nd response is 200\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1].code).to.eql(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"requests\": [\n      {\n        \"method\": \"GET\",\n        \"headers\": {\n          \"batch-request\": \"1\"\n        },\n        \"body\": \"\",\n        \"relative_url\": \"/get\"\n      },\n      {\n        \"method\": \"GET\",\n        \"headers\": {},\n        \"body\": \"\",\n        \"relative_url\": \"/uuid\"\n      }\n    ],\n    \"suppress_parallel_execution\": true\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{tyk-gateway.host}}/basic-open-api/tyk/batch/",
							"protocol": "http",
							"host": [
								"{{tyk-gateway.host}}"
							],
							"path": [
								"basic-open-api",
								"tyk",
								"batch",
								""
							]
						},
						"description": "This request calls the special `/tyk/batch` endpoint, which enables the Gateway to make multiple API requests baesd on a single API request received from the client. The special batch endpoint path is added to the listen path for the API, and must end with a trailing slash.\n\nWhen calling the batch endpoint, the API client must specify the requests that the Gateway will make. In this case, the body defines two requests which go to `/uuid` and `/get`. The request for `/get` also adds a custom header with the key `batch-request`. \n\nThe `suppress_parallel_execution` property defines whether the Gateway will send the requests sequentially or in parallel - in this case the setting is `true`, so the Gateway will send the requests in in sequence, which means the response data will be in the same sequence.\n\nThe response body contains data about the responses the Gateway received for the requests. The `requests` property contains the response data, showing the URL called, HTTP status, headers and body data received.\n\nThe batch request functionality must be enabled on the API definition by setting `enable_batch_request_support` to `true`."
					},
					"response": []
				},
				{
					"name": "Hot reload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body status value is ok\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"ok\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-tyk-authorization",
								"value": "28d220fd77974a4facfb07dc1e49c2aa",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://{{tyk-gateway.host}}/tyk/reload/group?block=true",
							"protocol": "http",
							"host": [
								"{{tyk-gateway.host}}"
							],
							"path": [
								"tyk",
								"reload",
								"group"
							],
							"query": [
								{
									"key": "block",
									"value": "true"
								}
							]
						},
						"description": "This request forces the Gateways to reload their API and Policies from the Dashboard. During this process the Gateway can continue serving requests.\n\nThe reload is automatically handled when using the Dashboard to manage APIs and Policies. But this functionality can be useful for CI/CD or when the Gateway is not managed by the Dashboard."
					},
					"response": []
				},
				{
					"name": "Cache invalidation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var tykGatewayHost = pm.variables.get(\"tyk-gateway.host\");",
									"",
									"// this test relies on the \"/plugin-demo-api/uuid\" endpoint using the cache plugin",
									"var cacheRequest = {",
									"    url: 'http://' + tykGatewayHost + '/plugin-demo-api/uuid',",
									"    method: 'GET'",
									"};",
									"",
									"var cacheInvalidationRequest = {",
									"    url: 'http://' + tykGatewayHost + '/tyk/cache/4692b70056154ccb41e44af0cdd990c3',",
									"    method: 'DELETE',",
									"    header: 'x-tyk-authorization:28d220fd77974a4facfb07dc1e49c2aa'",
									"};",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body message value is 'cache invalidated'\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"cache invalidated\");",
									"});",
									"",
									"pm.test(\"Response differs after cache is cleared\", function() {",
									"    var response1;",
									"    var response2;",
									"    var response3;",
									"",
									"    pm.sendRequest(cacheRequest, function (err, response) {",
									"        // store the first response",
									"        response1=response.json().uuid;",
									"",
									"        pm.sendRequest(cacheRequest, function (err, response) {",
									"            // store the second response",
									"            response2=response.json().uuid;",
									"",
									"            // check that response 1 and 2 are the same - i.e. the caching works",
									"            pm.expect(response1).to.eql(response2);",
									"",
									"            // invalidate the cache",
									"            pm.sendRequest(cacheInvalidationRequest, function (err, response) {",
									"                pm.sendRequest(cacheRequest, function (err, response) {",
									"                    // store the third response",
									"                    response3=response.json().uuid;",
									"",
									"                    // check that the responses 2 and 3 are different - i.e. the cache invalidation works",
									"                    pm.expect(response2).to.not.eql(response3);",
									"                });",
									"            });",
									"        });",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-tyk-authorization",
								"value": "28d220fd77974a4facfb07dc1e49c2aa",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://{{tyk-gateway.host}}/tyk/cache/4692b70056154ccb41e44af0cdd990c3",
							"protocol": "http",
							"host": [
								"{{tyk-gateway.host}}"
							],
							"path": [
								"tyk",
								"cache",
								"4692b70056154ccb41e44af0cdd990c3"
							]
						},
						"description": "This request calls the cache invalidation Gateway API endpoint, which invalidates the cached responses for an API which have been stored by the Gateway. \n\nThis is done on a per-API basis, with the API id provided as the last part of the URL path - in this case `4692b70056154ccb41e44af0cdd990c3`. This clears any cached responses the Gateway has stored for the API. If successful, the API client will receive a response with a `200 OK` HTTP status, and a body message stating `cache invalidated`.\n\nThe cached data will be removed from Redis, so will affect any other Gateways which are using the same Redis instance.\n\nThe process of cache invalidation can also be initiated through the Dashboard API."
					},
					"response": []
				},
				{
					"name": "Secret store - Local",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    // this also essentially tests that the listen path is working",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Target host is httpbin\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.headers.Host).to.eql(\"httpbin\");",
									"});",
									"",
									"pm.test(\"Secret header is set\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.headers[\"Secret-Header\"]).to.eql(\"secret-header-value\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{tyk-gateway.host}}/secret-path/get",
							"protocol": "http",
							"host": [
								"{{tyk-gateway.host}}"
							],
							"path": [
								"secret-path",
								"get"
							]
						},
						"description": "This request calls the **Secret API**, which has its *listen path* and *target URL* set using secret values taken from the Gateway's configuration file. It also injects a header called `Secret-Header` with the value `secret-header-value`.\n\nThe values are stored in a key/value array called `secrets` in the Gateway's configuration file `tyk.conf`:\n```\n  \"secrets\": {\n    \"target_url\": \"http://httpbin/\",\n    \"listen_path\": \"/secret-path/\"\n    \"header\": \"secret-header-value\"\n  }\n```\n\nThese values can be used as values in the API Definition.\n- When setting the *listen path* and *target URL*, the syntax is `secrets://value` where `value` is the key for the `secrets` array e.g. `secrets://target_url`. \n- When used in other contexts, such as setting a header value, the syntax is `$secret_conf.value` e.g. `$secret_conf.header`.\n\nThe Gateway can also pull key/value pairs from secret stores such as Vault and Consul. See https://tyk.io/docs/tyk-configuration-reference/kv-store/ for more information."
					},
					"response": []
				}
			]
		},
		{
			"name": "Basic Test Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{tyk-gateway.host}}/basic-open-api/get",
					"protocol": "http",
					"host": [
						"{{tyk-gateway.host}}"
					],
					"path": [
						"basic-open-api",
						"get"
					]
				},
				"description": "This is a basic test request to check that the Gateway is working ok.\n\nA `200 OK` status code and JSON response should be received in the response."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "tyk-gateway.host",
			"value": "tyk-gateway.localhost:8080"
		},
		{
			"key": "tyk-gateway-2.host",
			"value": "tyk-gateway-2.localhost:8081"
		},
		{
			"key": "tyk-custom-domain.host",
			"value": "tyk-custom-domain.com:8080"
		},
		{
			"key": "tyk-dashboard.host",
			"value": "tyk-dashboard.localhost:3000"
		}
	]
}