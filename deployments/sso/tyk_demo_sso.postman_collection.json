{
	"info": {
		"_postman_id": "4777a12d-ae25-42fe-9bf3-e49cad70ae70",
		"name": "Tyk Demo - SSO",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "LDAP - Generate API key",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Key data is returned\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.key_id).to.be.length.gt(0)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "username",
							"value": "test",
							"type": "text"
						},
						{
							"key": "password",
							"value": "secret",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://{{tyk-identity-broker.host}}/auth/ldap-token/1",
					"protocol": "http",
					"host": [
						"{{tyk-identity-broker.host}}"
					],
					"path": [
						"auth",
						"ldap-token",
						"1"
					]
				},
				"description": "This request generates an API key using credentials authenticated with LDAP.\n\nThe request goes to the Identity Broker, which is configured to verify the credentials provided as body values. In this example the body contains two values, `username` set to `test`, and `password` set to `secret`. The Identity Broker takes these values and converts it into an LDAP query as defined in the TIB profile.\n\nThe URL reqested defines what the Identity Broker will do with the request. In this case, the path starts `/auth/ldap-server` which means that the `ldap-server` profile will be used to process the request. The `1` at the end of the path has no significance.\nThe profile is configured to generate an API key which is associated with a specific Policy, which defines the access rights and other values imposed on the key.\n\nIf the request is successful then a HTTP 200 response is returned with the response body containing the new key, as the value of the `key_id` property, for example:\n```\n{\n    \"key_id\": \"eyJvcmciOiI1ZTlkOTU0NGExZGNkNjAwMDFkMGVkMjAiLCJpZCI6Ijc2Y2UxYmE2MGUyOTQ2Mjg4NzA4Y2IzNGRlZTAyYWNiIiwiaCI6Im11cm11cjY0In0=\"\n}\n```"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "tyk-identity-broker.host",
			"value": "localhost:3010"
		},
		{
			"key": "tyk-dashboard.host",
			"value": "tyk-dashboard.localhost:3000"
		}
	]
}