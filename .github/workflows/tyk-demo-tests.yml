---
name: Tyk Demo API Tests
on:
  workflow_dispatch:
    inputs:
      gateway_debug:
        description: 'Enable Gateway debug logging'
        required: false
        type: boolean
        default: false
      dashboard_debug:
        description: 'Enable Dashboard debug logging'
        required: false
        type: boolean
        default: false
  push:
jobs:
  Tyk-Demo-Api-Tests:
    runs-on: ubuntu-latest
    steps:
      - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }}
          event."
      - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by
          GitHub!"
      - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository
          is ${{ github.repository }}."
      - name: Install websocat (binary method) for use in custom scripted tests
        run: |
          wget https://github.com/vi/websocat/releases/download/v1.14.0/websocat.x86_64-unknown-linux-musl
          chmod +x websocat.x86_64-unknown-linux-musl
          sudo mv websocat.x86_64-unknown-linux-musl /usr/local/bin/websocat
      - name: Check Out Repository Code
        uses: actions/checkout@v4
      - run: echo "üí° The ${{ github.repository }} repository has been cloned to the
          runner."
      - name: Determine log levels based on workflow input
        id: log_levels
        run: |
          if ${{ github.event_name == 'workflow_dispatch' }}; then
            if ${{ inputs.gateway_debug == true }}; then
              echo "GATEWAY_LOGLEVEL=debug" >> .env
            fi
            if ${{ inputs.dashboard_debug == true }}; then
              echo "DASHBOARD_LOGLEVEL=debug" >> .env
            fi
          else
            # Default to debug logging for push events
            echo "GATEWAY_LOGLEVEL=debug" >> .env
            echo "DASHBOARD_LOGLEVEL=debug" >> .env
          fi
      - name: Extract Docker Image Tag
        id: get-gateway-tag
        run: |
          GATEWAY_TAG=$(awk '/tyk-gateway:/ { in_gateway=1 }
                            in_gateway && /image:/ {
                              if (match($0, /:-v[0-9]+\.[0-9]+\.[0-9]+([-._a-zA-Z0-9]*)?/)) {
                                print substr($0, RSTART+2, RLENGTH-2)
                              }
                              in_gateway=0
                            }' deployments/tyk/docker-compose.yml | sort -u | head -n 1)

          if [[ -z "$GATEWAY_TAG" ]]; then
            echo "‚ùå Error: GATEWAY_TAG is empty"
            exit 1
          fi

          if [[ ! "$GATEWAY_TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+([-._a-zA-Z0-9]+)?$ ]]; then
            echo "‚ùå Error: GATEWAY_TAG '$GATEWAY_TAG' is not in a valid semver format"
            exit 1
          fi

          echo "‚úÖ Extracted gateway tag: $GATEWAY_TAG"
          echo "gateway-tag=$GATEWAY_TAG" >> "$GITHUB_OUTPUT"
      - name: Cache Go Plugins
        uses: actions/cache@v4
        with:
          path: .bootstrap/plugin-cache/${{ steps.get-gateway-tag.outputs.gateway-tag }}
          key: ${{ runner.os }}-plugin-cache-${{ steps.get-gateway-tag.outputs.gateway-tag }}-${{ hashFiles('deployments/tyk/volumes/tyk-gateway/plugins/go/**/*') }}
      - name: Add licences to environment
        run: |
          echo "DASHBOARD_LICENCE=${{ secrets.DASH_LICENSE }}" >> .env
          echo "MDCB_LICENCE=${{ secrets.MDCB_LICENSE }}" >> .env
      - name: Bootstrap and Test All Eligible Deployments
        run: ./scripts/test-all.sh
      - name: Store Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: logs
          path: logs/
      - name: Show Bootstrap Log
        if: always()
        run: cat logs/bootstrap.log
      - name: Show Test Log
        if: always()
        run: cat logs/test.log
      - run: echo "üçè This job's status is ${{ job.status }}."
