---
name: Tyk Demo API Tests
on:
  - push
jobs:
  Tyk-Demo-Api-Tests:
    runs-on: ubuntu-latest
    steps:
      - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }}
          event."
      - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by
          GitHub!"
      - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository
          is ${{ github.repository }}."
      - name: Install websocat (binary method) for use in custom scripted tests
        run: |
          wget https://github.com/vi/websocat/releases/download/v1.14.0/websocat.x86_64-unknown-linux-musl
          chmod +x websocat.x86_64-unknown-linux-musl
          sudo mv websocat.x86_64-unknown-linux-musl /usr/local/bin/websocat
      - name: Check Out Repository Code
        uses: actions/checkout@v4
      - run: echo "üí° The ${{ github.repository }} repository has been cloned to the
          runner."
      - name: Determine log levels based on github action "enable debug logging" status
        id: log_levels
        run: |
          if [[ "${ACTIONS_STEP_DEBUG}" == "true" ]]; then
            echo "gateway_loglevel=debug" >> $GITHUB_OUTPUT
            echo "dashboard_loglevel=debug" >> $GITHUB_OUTPUT
          else
            echo "gateway_loglevel=info" >> $GITHUB_OUTPUT
            echo "dashboard_loglevel=info" >> $GITHUB_OUTPUT
          fi
      - name: Write Docker Compose .env file
        run: |
          echo "GATEWAY_LOGLEVEL=${{ steps.log_levels.outputs.gateway_loglevel }}" >> .env
          echo "DASHBOARD_LOGLEVEL=${{ steps.log_levels.outputs.dashboard_loglevel }}" >> .env
      - name: Extract Docker Image Tag
        id: get-gateway-tag
        run: |
          GATEWAY_TAG=$(grep -m 1 'tykio/tyk-gateway-ee:' deployments/tyk/docker-compose.yml | awk -F':' '{print $NF}' | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//' -e 's/\${GATEWAY_VERSION:-\(.*\)}/\1/' -e 's/^-//' -e 's/}$//')
          echo "gateway-tag=$GATEWAY_TAG" >> $GITHUB_OUTPUT
          echo "Extracted gateway tag: $GATEWAY_TAG"
      - name: Cache Go Plugins
        uses: actions/cache@v4
        with:
          path: .bootstrap/plugin-cache/${{ steps.get-gateway-tag.outputs.gateway-tag }}
          key: ${{ runner.os }}-plugin-cache-${{ steps.get-gateway-tag.outputs.gateway-tag }}-${{ hashFiles('deployments/tyk/volumes/tyk-gateway/plugins/go/**/*') }}
      - name: Create Environment File
        run: |
          echo "DASHBOARD_LICENCE=${{ secrets.DASH_LICENSE }}" >> .env
          echo "MDCB_LICENCE=${{ secrets.MDCB_LICENSE }}" >> .env
      - name: Bootstrap and Test All Eligible Deployments
        run: ./scripts/test-all.sh
      - name: Store Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: logs
          path: logs/
      - name: Show Bootstrap Log
        if: always()
        run: cat logs/bootstrap.log
      - name: Show Test Log
        if: always()
        run: cat logs/test.log
      - run: echo "üçè This job's status is ${{ job.status }}."
