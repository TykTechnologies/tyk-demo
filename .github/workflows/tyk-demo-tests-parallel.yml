---
name: Tyk Demo API Tests (Parallel)
on:
  workflow_dispatch:
    inputs:
      gateway_debug:
        description: 'Enable Gateway debug logging'
        required: false
        type: boolean
        default: false
      dashboard_debug:
        description: 'Enable Dashboard debug logging'
        required: false
        type: boolean
        default: false
  push:

jobs:
  # First job to collect all the deployments to test
  discover-deployments:
    runs-on: ubuntu-latest
    outputs:
      deployment-matrix: ${{ steps.set-matrix.outputs.deployment-matrix }}
      gateway-tag: ${{ steps.get-gateway-tag.outputs.gateway-tag }}
    steps:
      - name: Check Out Repository Code
        uses: actions/checkout@v4

      - name: Find All Deployments
        id: set-matrix
        run: |
          DEPLOYMENTS=$(find deployments -mindepth 1 -maxdepth 1 -type d -printf '%f\n' | jq -R -s -c 'split("\n") | map(select(length > 0)) | sort')

          if [ "${#DEPLOYMENTS[@]}" -eq 0 ]; then
            echo "::error::No deployments found. Exiting workflow." >&2
            exit 1
          fi

          echo "deployment-matrix=${DEPLOYMENTS}" >> $GITHUB_OUTPUT
          echo "✅ Found deployments: ${DEPLOYMENTS}"
      - name: Extract Docker Image Tag
        id: get-gateway-tag
        run: |
          GATEWAY_TAG=$(awk '/tyk-gateway:/ { in_gateway=1 }
                            in_gateway && /image:/ {
                              if (match($0, /:-v[0-9]+\.[0-9]+\.[0-9]+([-._a-zA-Z0-9]*)?/)) {
                                print substr($0, RSTART+2, RLENGTH-2)
                              }
                              in_gateway=0
                            }' deployments/tyk/docker-compose.yml | sort -u | head -n 1)

          if [[ -z "$GATEWAY_TAG" ]]; then
            echo "::error::GATEWAY_TAG is empty"
            exit 1
          fi

          if [[ ! "$GATEWAY_TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+([-._a-zA-Z0-9]+)?$ ]]; then
            echo "::error::GATEWAY_TAG '$GATEWAY_TAG' is not in a valid semver format"
            exit 1
          fi

          echo "✅ Extracted gateway tag: $GATEWAY_TAG"
          echo "gateway-tag=$GATEWAY_TAG" >> "$GITHUB_OUTPUT"

  # Run each deployment test in parallel
  test-deployments:
    needs: discover-deployments
    runs-on: ubuntu-latest
    outputs:
      deployment-results: ${{ steps.set-results.outputs.results }}
    strategy:
      fail-fast: false
      matrix:
        deployment: ${{ fromJson(needs.discover-deployments.outputs.deployment-matrix) }}

    steps:
      - name: Check Out Repository Code
        uses: actions/checkout@v4

      - name: Set global env vars
        run: |
          echo "DEPLOYMENT_DIR=$(pwd)/deployments/${{ matrix.deployment }}" >> $GITHUB_ENV
          echo "BASE_DIR=$(pwd)" >> $GITHUB_ENV

      - name: Install websocat for tests
        run: |
          wget https://github.com/vi/websocat/releases/download/v1.14.0/websocat.x86_64-unknown-linux-musl
          chmod +x websocat.x86_64-unknown-linux-musl
          sudo mv websocat.x86_64-unknown-linux-musl /usr/local/bin/websocat

      - name: Set up environment
        run: |
          echo "::group::Preparing test logs"
          source "$(pwd)/scripts/test-common.sh"
          prepare_test_logs
          echo "::endgroup::"

          echo "::group::Defaulting to debug logs for Gateway and Dashboard"
          echo "GATEWAY_LOGLEVEL=debug" >> .env
          echo "DASHBOARD_LOGLEVEL=debug" >> .env
          echo "✅ Gateway and Dashboard log levels set to debug 🐛"
          echo "::endgroup::"

          echo "::group::Setting licences"
          if [ -z "${{ secrets.DASH_LICENSE }}" ]; then
            echo "::error::DASH_LICENSE secret is not set or is empty." >&2
            exit 1
          fi
          if [ -z "${{ secrets.MDCB_LICENSE }}" ]; then
            echo "::error::MDCB_LICENSE secret is not set or is empty." >&2
            exit 1
          fi
          echo "✅ DASHBOARD_LICENCE added to .env"
          echo "DASHBOARD_LICENCE=${{ secrets.DASH_LICENSE }}" >> .env
          echo "✅ MDCB_LICENCE added to .env"
          echo "MDCB_LICENCE=${{ secrets.MDCB_LICENSE }}" >> .env
          echo "::endgroup::"

      - name: Read Deployment Manifest
        id: read-manifest
        run: |
          skip_deployment="false"
          compose_argument=""

          if [ -f "${DEPLOYMENT_DIR}/deployment.json" ]; then
            echo "Deployment manifest found in ${DEPLOYMENT_DIR}"
            jq '.' "${DEPLOYMENT_DIR}/deployment.json"
            skip_deployment=$(jq -r '.github.skipDeployment // "false"' "${DEPLOYMENT_DIR}/deployment.json")
            compose_argument=$(jq -r '.composeArgument // empty' "${DEPLOYMENT_DIR}/deployment.json")
          else
            echo "Deployment manifest not found in ${DEPLOYMENT_DIR}"
          fi

          echo "skip_deployment=$skip_deployment" >> $GITHUB_OUTPUT
          echo "compose_argument=$compose_argument" >> $GITHUB_OUTPUT

      - name: Cache Go Plugins
        uses: actions/cache@v4
        with:
          path: .bootstrap/plugin-cache/${{ needs.discover-deployments.outputs.gateway-tag }}
          key: ${{ runner.os }}-plugin-cache-${{ needs.discover-deployments.outputs.gateway-tag }}-${{ hashFiles('deployments/tyk/volumes/tyk-gateway/plugins/go/**/*') }}

      - name: Create deployment
        id: create-deployment
        if: steps.read-manifest.outputs.skip_deployment != 'true'
        run: |
          COMPOSE_ARG="${{ steps.read-manifest.outputs.compose_argument }}"

          if ./up.sh "${COMPOSE_ARG:-${{ matrix.deployment }}}" --hide-progress --skip-hostname-check; then
            echo "✅ Deployment created successfully"
          else
            echo "::error::Deployment creation failed for ${{ matrix.deployment }}"
            exit 1
          fi

      - name: Validate Tests
        if: steps.read-manifest.outputs.skip_deployment != 'true'
        id: validate-tests
        run: |
          source "$(pwd)/scripts/test-common.sh"

          echo "::group::Checking for Postman tests"
          if validate_postman_collection "${{ matrix.deployment }}" "${DEPLOYMENT_DIR}"; then
            echo "✅ Found Postman tests"
            echo "postman-tests-found=true" >> $GITHUB_OUTPUT
          else
            echo "❌ No Postman tests found"
            echo "postman-tests-found=false" >> $GITHUB_OUTPUT
          fi
          echo "::endgroup::"

          echo "::group::Checking for custom tests"
          if validate_test_scripts "${{ matrix.deployment }}" "${DEPLOYMENT_DIR}"; then
            echo "✅ Found custom tests"
            echo "custom-tests-found=true" >> $GITHUB_OUTPUT
          else
            echo "❌ No custom tests found"
            echo "custom-tests-found=false" >> $GITHUB_OUTPUT
          fi
          echo "::endgroup::"

      - name: Run Postman Tests
        id: run-postman-tests
        if: steps.validate-tests.outputs.postman-tests-found == 'true'
        continue-on-error: true
        run: |
          source "$(pwd)/scripts/test-common.sh"

          if run_postman_test "${{ matrix.deployment }}" "${DEPLOYMENT_DIR}"; then
            echo "✅ Postman tests passed"
          else
            echo "❌ Postman tests failed"
          fi

          strip_control_chars "logs/postman.log"

      - name: Run Custom Tests
        id: run-custom-tests
        if: steps.validate-tests.outputs.custom-tests-found == 'true'
        continue-on-error: true
        run: |
          source "$(pwd)/scripts/test-common.sh"

          # Run custom tests
          if run_test_scripts "${{ matrix.deployment }}" "${DEPLOYMENT_DIR}"; then
            echo "✅ Custom tests passed"
          else
            echo "❌ Custom tests failed"
          fi

      - name: Capture Container Logs
        if: always()
        run: |
          source "$(pwd)/scripts/test-common.sh"

          capture_container_logs ${{ matrix.deployment }}

      - name: Upload Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: logs-${{ matrix.deployment }}
          path: logs/

      - name: Set Results
        id: set-results
        if: always()
        run: |
          # Determine deployment status - success, skipped, or failure
          DEPLOYMENT_STATUS="failure"
          if [ "${{ steps.read-manifest.outputs.skip_deployment }}" == "true" ]; then
            DEPLOYMENT_STATUS="skipped"
          elif [ "${{ steps.create-deployment.outcome }}" == "success" ]; then
            DEPLOYMENT_STATUS="success"
          fi

          # Capture Postman test info
          POSTMAN_FOUND=${{ steps.validate-tests.outputs.postman-tests-found || 'false' }}
          POSTMAN_STATUS="skipped"
          if [ "$POSTMAN_FOUND" == "true" ]; then
            POSTMAN_STATUS=${{ steps.run-postman-tests.outcome }}
          fi

          # Capture custom test info
          CUSTOM_FOUND=${{ steps.validate-tests.outputs.custom-tests-found || 'false' }}
          CUSTOM_STATUS="skipped"
          if [ "$CUSTOM_FOUND" == "true" ]; then
            CUSTOM_STATUS=${{ steps.run-custom-tests.outcome }}
          fi

          # Create JSON result for this deployment
          RESULT=$(echo '{
            "deployment": "${{ matrix.deployment }}",
            "deployment_status": "'$DEPLOYMENT_STATUS'",
            "postman_found": "'$POSTMAN_FOUND'",
            "postman_status": "'$POSTMAN_STATUS'",
            "custom_found": "'$CUSTOM_FOUND'",
            "custom_status": "'$CUSTOM_STATUS'"
          }' | jq -c .)

          echo "$RESULT" | jq
          echo "results=$RESULT" >> $GITHUB_OUTPUT

  # Collect test results and summarise
  summarise-results:
    needs: [discover-deployments, test-deployments]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Summarise test results
        run: |
          echo "## Test Results Summary"
          echo ""
          echo "```"
          echo "╔════════════════╦═══════════════════╦════════════════╦═══════════════╦══════════════════╗"
          echo "║ DEPLOYMENT     ║ DEPLOYMENT STATUS ║ POSTMAN TESTS  ║ CUSTOM TESTS  ║ OVERALL STATUS   ║"
          echo "╠════════════════╬═══════════════════╬════════════════╬═══════════════╬══════════════════╣"

          DEPLOYMENTS_JSON='${{ needs.discover-deployments.outputs.deployment-matrix }}'
          RESULTS_JSON='${{ toJSON(needs.test-deployments.outputs.deployment-results) }}'

          # Parse the JSON strings
          DEPLOYMENTS=$(echo "$DEPLOYMENTS_JSON" | jq -r '.[]')
          RESULTS=$(echo "$RESULTS_JSON" | jq -r '.[]')

          for deployment in $DEPLOYMENTS; do
            result=$(echo "$RESULTS" | jq -r ".[] | select(.deployment == \"$deployment\")")

            deployment_status=$(echo "$result" | jq -r '.deployment_status // "failure"')
            postman_found=$(echo "$result" | jq -r '.postman_found // "false"')
            postman_status=$(echo "$result" | jq -r '.postman_status // "skipped"')
            custom_found=$(echo "$result" | jq -r '.custom_found // "false"')
            custom_status=$(echo "$result" | jq -r '.custom_status // "skipped"')

            deployment_display=""
            if [[ "$deployment_status" == "skipped" ]]; then
              deployment_display="- Skipped"
            elif [[ "$deployment_status" == "success" ]]; then
              deployment_display="✓ Success"
            else
              deployment_display="✗ Failed"
            fi

            postman_display=""
            if [[ "$deployment_status" == "skipped" ]]; then
              postman_display="- Skipped"
            elif [[ "$postman_found" == "true" ]]; then
              if [[ "$postman_status" == "success" ]]; then
                postman_display="✓ Passed"
              else
                postman_display="✗ Failed"
              fi
            else
              postman_display="N/A"
            fi

            custom_display=""
            if [[ "$deployment_status" == "skipped" ]]; then
              custom_display="- Skipped"
            elif [[ "$custom_found" == "true" ]]; then
              if [[ "$custom_status" == "success" ]]; then
                custom_display="✓ Passed"
              else
                custom_display="✗ Failed"
              fi
            else
              custom_display="N/A"
            fi

            # Determine overall status
            overall_status=""
            if [[ "$deployment_status" == "skipped" ]]; then
              overall_status="- Skipped"
            elif [[ "$deployment_status" == "failure" ]]; then
              overall_status="✗ Failed (deploy)"
            elif [[ "$postman_found" == "true" && "$postman_status" != "success" ]] || [[ "$custom_found" == "true" && "$custom_status" != "success" ]]; then
              overall_status="✗ Failed (tests)"
            else
              overall_status="✓ Passed"
            fi

            # Pad strings for consistent column width
            DEPLOY_PAD=$(printf "%-14s" "$deployment")
            DEPLOYMENT_PAD=$(printf "%-17s" "$deployment_display")
            POSTMAN_PAD=$(printf "%-14s" "$postman_display")
            CUSTOM_PAD=$(printf "%-13s" "$custom_display")
            OVERALL_PAD=$(printf "%-16s" "$overall_status")

            echo "║ $DEPLOY_PAD ║ $DEPLOYMENT_PAD ║ $POSTMAN_PAD ║ $CUSTOM_PAD ║ $OVERALL_PAD ║"
          done

          echo "╚════════════════╩═══════════════════╩════════════════╩═══════════════╩══════════════════╝"
          echo "```"
