name: Tyk Demo API Tests (Parallel)
on:
  workflow_dispatch:
    inputs:
      gateway_debug:
        description: 'Enable Gateway debug logging'
        required: false
        type: boolean
        default: false
      dashboard_debug:
        description: 'Enable Dashboard debug logging'
        required: false
        type: boolean
        default: false
  push:

jobs:
  # First job to collect all the deployments to test
  discover-deployments:
    runs-on: ubuntu-latest
    outputs:
      deployment-matrix: ${{ steps.set-matrix.outputs.deployment-matrix }}
      gateway-tag: ${{ steps.get-gateway-tag.outputs.gateway-tag }}
    steps:
      - name: Check Out Repository Code
        uses: actions/checkout@v4
      
      - name: Find All Deployments
        id: set-matrix
        run: |
          DEPLOYMENTS=$(find deployments -mindepth 1 -maxdepth 1 -type d -printf '%f\n' | jq -R -s -c 'split("\n") | map(select(length > 0)) | sort')

          if [ "${#DEPLOYMENTS[@]}" -eq 0 ]; then
            echo "::error::No deployments found. Exiting workflow." >&2
            exit 1
          fi
      
          echo "deployment-matrix=${DEPLOYMENTS}" >> $GITHUB_OUTPUT
          echo "✅ Found deployments: ${DEPLOYMENTS}"
      - name: Extract Docker Image Tag
        id: get-gateway-tag
        run: |
          GATEWAY_TAG=$(awk '/tyk-gateway:/ { in_gateway=1 }
                            in_gateway && /image:/ {
                              if (match($0, /:-v[0-9]+\.[0-9]+\.[0-9]+([-._a-zA-Z0-9]*)?/)) {
                                print substr($0, RSTART+2, RLENGTH-2)
                              }
                              in_gateway=0
                            }' deployments/tyk/docker-compose.yml | sort -u | head -n 1)

          if [[ -z "$GATEWAY_TAG" ]]; then
            echo "::error::GATEWAY_TAG is empty"
            exit 1
          fi

          if [[ ! "$GATEWAY_TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+([-._a-zA-Z0-9]+)?$ ]]; then
            echo "::error::GATEWAY_TAG '$GATEWAY_TAG' is not in a valid semver format"
            exit 1
          fi

          echo "✅ Extracted gateway tag: $GATEWAY_TAG"
          echo "gateway-tag=$GATEWAY_TAG" >> "$GITHUB_OUTPUT"

  # Run each deployment test in parallel
  test-deployments:
    needs: discover-deployments
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false  # Continue with other tests even if one fails
      matrix:
        deployment: ${{ fromJson(needs.discover-deployments.outputs.deployment-matrix) }}
    env:
      DEPLOYMENT_DIR: "$(pwd)/deployments/${{ matrix.deployment }}"
    
    steps:
      - name: Check Out Repository Code
        uses: actions/checkout@v4
      
      - name: Install websocat for tests
        run: |
          wget https://github.com/vi/websocat/releases/download/v1.14.0/websocat.x86_64-unknown-linux-musl
          chmod +x websocat.x86_64-unknown-linux-musl
          sudo mv websocat.x86_64-unknown-linux-musl /usr/local/bin/websocat
      
      - name: Set up environment
        run: |
          echo "::group::Preparing test logs"
          source "$(pwd)/scripts/test-common.sh"
          prepare_test_logs
          echo "::endgroup::"
          
          echo "::group::Defaulting to debug logs for Gateway and Dashboard"
          echo "GATEWAY_LOGLEVEL=debug" >> .env
          echo "DASHBOARD_LOGLEVEL=debug" >> .env
          echo "✅ Gateway and Dashboard log levels set to debug 🐛"
          echo "::endgroup::"

          echo "::group::Setting licences"
          if [ -z "${{ secrets.DASH_LICENSE }}" ]; then
            echo "::error::DASH_LICENSE secret is not set or is empty." >&2
            exit 1
          fi
          if [ -z "${{ secrets.MDCB_LICENSE }}" ]; then
            echo "::error::MDCB_LICENSE secret is not set or is empty." >&2
            exit 1
          fi
          echo "✅ DASHBOARD_LICENCE added to .env"
          echo "DASHBOARD_LICENCE=${{ secrets.DASH_LICENSE }}" >> .env
          echo "✅ MDCB_LICENCE added to .env"
          echo "MDCB_LICENCE=${{ secrets.MDCB_LICENSE }}" >> .env
          echo "::endgroup::"

      - name: Cache Go Plugins
        uses: actions/cache@v4
        with:
          path: .bootstrap/plugin-cache/${{ needs.discover-deployments.outputs.gateway-tag }}
          key: ${{ runner.os }}-plugin-cache-${{ needs.discover-deployments.outputs.gateway-tag }}-${{ hashFiles('deployments/tyk/volumes/tyk-gateway/plugins/go/**/*') }}
      
      - name: Create deployment
        id: create-deployment
        run: |
          echo "Creating deployment: ${{ matrix.deployment }}"
          compose_argument=""

          echo "::group::Reading deployment manifest"
          if [ -f "${DEPLOYMENT_DIR}/deployment.json" ]; then
            compose_argument=$(jq -r '.composeArgument // empty' "${DEPLOYMENT_DIR}/deployment.json")
            echo "Compose argument set to: $compose_argument"
          else
            echo "No deployment manifest found"
          fi
          echo "::endgroup::"
          
          echo "::group::Bringing deployment up"
          if ! ./up.sh "${compose_argument:-${{ matrix.deployment }}}" --hide-progress --skip-hostname-check; then
            echo "::error::Deployment creation failed for ${{ matrix.deployment }}"
            exit 1
          fi
          echo "✅ Deployment ${{ matrix.deployment }} created successfully"
          echo "::endgroup::"

      - name: Validate Tests
        id: validate-tests
        run: |
          source "$(pwd)/scripts/test-common.sh"

          echo "::group::Checking for Postman tests"
          has_postman_tests=false
          if (validate_postman_collection "${{ matrix.deployment }}" "${DEPLOYMENT_DIR}"); then
            echo "✅ Found postman tests"
            has_postman_tests=true
          else
            echo "❌ No postman test found"
          fi
          echo "has-postman-tests=${has_postman_tests}" >> $GITHUB_OUTPUT
          echo "::endgroup::"

          echo "::group::Checking for custom tests"
          has_custom_tests=false
          if (validate_test_scripts "${{ matrix.deployment }}" "${DEPLOYMENT_DIR}"); then
            echo "✅ Found custom tests"
            has_custom_tests=true
          else
            echo "❌ No custom tests found"
          fi
          echo "has-custom-tests=${has_custom_tests}" >> $GITHUB_OUTPUT
          echo "::endgroup::"
      - name: Test deployment
        if: steps.validate-tests.outputs.has-postman-tests == 'true'
        run: |
          source "$(pwd)/scripts/test-common.sh"
         
          test_success=false
          
          # Run Postman tests if they exist
          if run_postman_test "${{ matrix.deployment }}" "${DEPLOYMENT_DIR}"; then
            echo "✅ Postman tests passed for ${{ matrix.deployment }}"
            test_success=true
          else
            echo "❌ Postman tests failed for ${{ matrix.deployment }}"
          fi

          echo "postman-test-result=${test_success}" >> $GITHUB_OUTPUT

          strip_control_chars "logs/postman.log"
          
          
          # # Run test scripts if they exist
          # if [ -d "${DEPLOYMENT_DIR}/tests" ] && [ "$(find ${DEPLOYMENT_DIR}/tests -name '*.sh' | wc -l)" -gt 0 ]; then
          #   echo "Running custom test scripts for ${{ matrix.deployment }}"
          #   if ! run_test_scripts "${{ matrix.deployment }}" "${DEPLOYMENT_DIR}"; then
          #     echo "::error::Custom tests failed for ${{ matrix.deployment }}"
          #     FAILED=true
          #   else
          #     echo "Custom tests passed for ${{ matrix.deployment }}"
          #   fi
          # fi
          
          # # Capture container logs if tests failed
          # if [ "$FAILED" = "true" ]; then
          #   timestamp=$(date -u "+%Y%m%d_%H%M%S")
          #   container_log_file="logs/containers-${{ matrix.deployment }}-${timestamp}.log"
          #   echo "Capturing container logs for failed deployment"
          #   ./docker-compose-command.sh logs --timestamps --no-color > "$container_log_file"
          # fi
          
          # # Tear down the deployment
          # echo "Removing deployment: ${{ matrix.deployment }}"
          # ./down.sh
          
          # # Handle overall success/failure
          # if [ "$FAILED" = "true" ]; then
          #   echo "::error::Tests for ${{ matrix.deployment }} failed"
          #   exit 1
          # else
          #   echo "All tests for ${{ matrix.deployment }} passed"
          # fi
          
          # echo "::endgroup::"
      
      - name: Skip deployment (no tests)
        if: steps.validate-tests.outputs.has-tests != 'true'
        run: |
          echo "Skipping deployment ${{ matrix.deployment }} as it has no tests"
      
      - name: Upload Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: logs-${{ matrix.deployment }}
          path: logs/

  # Collect test results and summarize
  summarize-results:
    needs: [test-deployments]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Check Out Repository Code
        uses: actions/checkout@v4
      
      - name: Download all logs
        uses: actions/download-artifact@v4
        with:
          path: all-logs
      
      - name: Summarize test results
        run: |
          echo "## Test Results Summary" > summary.md
          echo "" >> summary.md
          echo "| Deployment | Status |" >> summary.md
          echo "|------------|--------|" >> summary.md
          
          # Analyze artifact directories to determine test outcomes
          for deployment_logs in all-logs/logs-*; do
            deployment=$(echo "$deployment_logs" | sed 's|all-logs/logs-||')
            
            # Check if this is a valid deployment directory
            if [ -d "$deployment_logs" ]; then
              # Look for error indicators in logs
              if grep -q "::error::" "$deployment_logs"/*.log 2>/dev/null; then
                status="❌ Failed"
              else
                # Check if it was skipped
                if [ -z "$(find "$deployment_logs" -name "postman-*.log" 2>/dev/null)" ]; then
                  status="⏭️ Skipped (no tests)"
                else
                  status="✅ Passed"
                fi
              fi
              
              echo "| $deployment | $status |" >> summary.md
            fi
          done
          
          cat summary.md
      
      - name: Upload Summary
        uses: actions/upload-artifact@v4
        with:
          name: test-summary
          path: summary.md